{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfda\ufe0f Home","text":""},{"location":"#atmos","title":"Atmos","text":"<p>Synthesizing weather data into an immersive experience.</p>    Your browser does not support the video tag."},{"location":"journal/","title":"Learning journal","text":""},{"location":"journal/#learning-journal","title":"Learning journal","text":""},{"location":"journal/#8th-march","title":"8th March","text":""},{"location":"journal/#database-schema-changes","title":"Database Schema Changes","text":"<p>Replaced ENUM with a <code>sensor</code> Table <code>sensor_category</code> was a fixed ENUM and was changed to its own table <code>sensor</code> with <code>id</code>, <code>key</code>, <code>name</code>, and <code>unit</code>, allowing dynamic sensor types without modifying the schema.</p> <p>Added <code>key</code> for Lookups Previously, only <code>id</code> was used for reference. Now, a <code>key</code> column in <code>device</code>, <code>sensor</code>, and <code>setting</code> enables human-friendly lookups, making queries easier and cleaner.</p> <p>Replaced <code>sensor_type</code> with <code>sensor_id</code> <code>sensor_type</code> was a <code>VARCHAR(50)</code>, now replaced with <code>sensor_id</code> as a foreign key to <code>sensor</code>, ensuring consistency and preventing invalid entries.</p> <p>Improved <code>setting</code> Table Added <code>setting</code> table with <code>key</code>, <code>value</code>, and <code>default_value</code>, allowing customization with fallback defaults.</p> <p>Better Indexing Indexes added on <code>key</code>, <code>device_id</code>, and <code>sensor_id</code> for faster queries.</p>"},{"location":"journal/#concept-eer-drawio","title":"Concept EER (draw.io)","text":""},{"location":"journal/#old-eer","title":"Old EER","text":""},{"location":"journal/#new-eer","title":"New EER","text":""},{"location":"journal/#26th-february","title":"26th February","text":"<p>After drafting the concept, I'll request feedback on the following:</p>"},{"location":"journal/#user-user-stories","title":"User &amp; User Stories","text":"<ul> <li>Is the scope definition clear and comprehensive?</li> <li>Are Personas sufficient for defining users?</li> </ul>"},{"location":"journal/#main-goal","title":"Main Goal","text":"<ul> <li>I aimed for a less technical goal, aligning it with the user stories and their needs. Does this approach work?</li> </ul>"},{"location":"journal/#product-requirements","title":"Product Requirements","text":"<ul> <li>I've broken them down into different technical aspects and defined SMART goals for each. Is this structure effective?</li> </ul>"},{"location":"journal/#sketches","title":"Sketches","text":"<ul> <li>I'll share sketches once I begin designing and sketching the hardware. Should this assignment be categorized under Physical Sketches?</li> </ul>"},{"location":"journal/#14th-february","title":"14th February","text":""},{"location":"journal/#concept-development-peppers-ghost-hologram-weather-ai-integration","title":"Concept Development: Pepper\u2019s Ghost Hologram &amp; Weather AI Integration","text":"<p>The idea is to use Pepper\u2019s Ghost to create a floating holographic visualization inside the Breathing Light Form installation. The goal is to represent real-time weather conditions dynamically using AI-generated transitions between different atmospheric states like sunny, cloudy, and rainy.</p> <ul> <li>The LCD display will be placed inside the base, projecting visuals onto an angled transparent acrylic sheet.</li> <li>AI-generated animations will allow smooth transitions between weather states, making the illusion more immersive.</li> <li>The hologram should feel alive, responding dynamically to real-time weather data from sensors.</li> </ul>"},{"location":"journal/#led-based-atmospheric-feedback","title":"LED-Based Atmospheric Feedback","text":"<p>To complement the hologram, Neopixel LEDs will be used to represent temperature, humidity, and pressure:</p> <ul> <li>Temperature \u2192 Color Changes</li> <li>Cold: Blue</li> <li>Warm: Orange</li> <li>Hot: Red</li> <li>Humidity \u2192 Light Intensity</li> <li>High humidity: Dimmed light (mimicking fog).</li> <li>Low humidity: Brighter glow (clear atmosphere).</li> <li>Air Pressure \u2192 Pulsation Effect</li> <li>Low pressure: Slow breathing pulses.</li> <li>High pressure: Sharp flickering effects.</li> </ul> <p>The LEDs should create an immersive ambient effect that surrounds the holographic display.</p>"},{"location":"journal/#soundscape-integration","title":"Soundscape Integration","text":"<p>A small speaker system will add generative audio layers that reflect the weather conditions:</p> <ul> <li>Wind \u2192 Whispering breeze sounds.</li> <li>Rain \u2192 Soft water droplets.</li> <li>Storms \u2192 Distant thunder rumbles.</li> </ul> <p>The sound should be subtle but add depth to the experience, making it more engaging.</p>"},{"location":"journal/#environmental-data-processing-api-handling","title":"Environmental Data Processing &amp; API Handling","text":"<p>The embedded system will retrieve real-time weather data from multiple Arduinos placed in different locations:</p> <ul> <li>Main microcontroller (ESP32/Arduino Uno) will collect data.</li> <li>An API will process and send temperature, humidity, wind speed, and pressure data.</li> <li>The hologram, LEDs, and sound system will react dynamically based on these readings.</li> </ul>"},{"location":"journal/#website-purpose-functionality","title":"Website Purpose &amp; Functionality","text":"<p>The website serves as the interactive hub for the Breathing Light Form installation, providing users with real-time weather data, historical trends, and control over the device. It acts as both a visual dashboard and a remote interface for interacting with the installation.</p>"},{"location":"journal/#core-features","title":"Core Features","text":""},{"location":"journal/#live-weather-data-visualization","title":"Live Weather Data Visualization","text":"<ul> <li>Displays real-time weather information (temperature, humidity, pressure, wind speed) collected from multiple Arduino sensors.</li> <li>Uses interactive charts &amp; animations to showcase data changes dynamically.</li> </ul>"},{"location":"journal/#ai-generated-weather-hologram-control","title":"AI-Generated Weather Hologram Control","text":"<ul> <li>Users can remotely switch between forecast modes to preview upcoming weather changes.</li> <li>Sends commands to the Pepper\u2019s Ghost holographic display to alter the visualized weather conditions inside the installation.</li> <li>Allows customization of animation speed, transitions, or themes.</li> </ul>"},{"location":"journal/#led-sound-synchronization-controls","title":"LED &amp; Sound Synchronization Controls","text":"<ul> <li>Users can adjust LED intensity, color settings, and pulsing effects for a more personalized experience.</li> <li>Soundscapes can be toggled or adjusted in volume, allowing users to choose between ambient modes (stormy, calm, windy, etc.).</li> </ul>"},{"location":"journal/#historical-data-forecasting","title":"Historical Data &amp; Forecasting","text":"<ul> <li>Stores weather data from previous days and provides trend visualizations.</li> <li>Allows comparisons between current conditions and past weather patterns.</li> </ul>"},{"location":"journal/#user-interaction-customization","title":"User Interaction &amp; Customization","text":"<ul> <li>Touch &amp; Gesture Control: If integrated with sensors, the website could map gestures to changes in the holographic display.</li> <li>Customization Panel: Users can tweak light effects, sound intensity, and display preferences.</li> <li>Future expansion: Possible AR/WebXR integration to allow users to see holographic weather overlays via their phone or VR.</li> </ul>"},{"location":"journal/#13th-february","title":"13th February","text":""},{"location":"journal/#frontend-implementation","title":"Frontend Implementation","text":"<p>The frontend is currently being served using Vite, which handles SCSS and JavaScript with hot-reload enabled on port :5173 while Docker is running. This setup allows for quick iteration and development without needing to restart the server each time changes are made. The next step will be to organize the project files into a <code>src</code> or <code>dev</code> folder to improve workflow efficiency, keeping the development environment separated from Docker.</p>"},{"location":"journal/#backend-and-database","title":"Backend and Database","text":"<p>The backend follows an MVC controller-model architecture, which is designed for clarity and scalability. With feedback from Mats, I\u2019ve received approval for the concept and further suggestions for future optimization. Notably, Mats recommended utilizing arrays to simplify handling the request data and also suggested exploring Laravel for better object-oriented practices, especially around routing, to enhance maintainability.</p>"},{"location":"journal/#next-steps","title":"Next Steps","text":"<p>Next, I plan to refine the backend structure based on the feedback received and begin integrating more sophisticated routing mechanisms. Additionally, I will continue optimizing the frontend by further modularizing the project and ensuring smooth communication between the frontend and backend as the project evolves.</p>"},{"location":"journal/#the-same-night","title":"the same night...","text":""},{"location":"journal/#frontend-vite-integration","title":"Frontend &amp; Vite Integration","text":"<p>Vite is now correctly bound to <code>0.0.0.0</code>, making it accessible within Docker.</p> <ul> <li><code>dev.localhost</code> proxies frontend requests to <code>iot-vite:5173</code>, resolving previous accessibility issues.</li> <li>Project structure now separates:</li> <li><code>web/src/frontend/</code> \u2192 Development source (served via Vite).</li> <li><code>web/build/frontend/</code> \u2192 Production build (served via Nginx).</li> </ul> <p>This ensures that development and production environments remain distinct, preventing unnecessary rebuilds during local development.</p>"},{"location":"journal/#backend-isolation-api-handling","title":"Backend Isolation &amp; API Handling","text":"<p>A separation between production and development environments has been established by introducing distinct PHP instances:</p> <ul> <li><code>iot-php</code> (production) \u2192 Serves <code>web/build/</code> under <code>localhost</code>.</li> <li><code>iot-php-dev</code> (development) \u2192 Uses <code>web/src/api/</code> under <code>dev.localhost</code>.</li> </ul> <p>Nginx is now configured to correctly proxy API requests on <code>dev.localhost/api/</code> to <code>iot-php-dev</code>, ensuring development changes do not interfere with production.</p>"},{"location":"journal/#environment-variable-management-env","title":"Environment Variable Management (.env)","text":"<p>Hardcoded database credentials have been replaced with environment variables. Configuration files are now stored under:</p> <ul> <li><code>env/production/.env</code> \u2192 Used inside <code>iot-php</code>.</li> <li><code>env/development/.env</code> \u2192 Used inside <code>iot-php-dev</code>.</li> </ul> <p>The <code>Database.php</code> class dynamically retrieves database credentials using <code>getenv()</code>, ensuring environment-specific settings are correctly applied.</p>"},{"location":"journal/#database-management","title":"Database Management","text":"<p>A single MariaDB instance is used for both environments, with separate databases:</p> <ul> <li><code>iot</code> (Production)</li> <li><code>iot_dev</code> (Development)</li> </ul> <p>PhpMyAdmin remains unchanged but allows switching between databases, maintaining environment separation.</p>"},{"location":"journal/#next-steps_1","title":"Next Steps","text":"<ul> <li>Explore automated deployment options for the front and backend</li> </ul>"},{"location":"journal/#12th-february","title":"12th February","text":""},{"location":"journal/#frontend-implementation_1","title":"Frontend Implementation","text":"<p>The frontend has been set up using simple HTML and JavaScript, with Chart.js integrated to visualize data dynamically. AJAX is utilized to fetch and update data in real time, ensuring smooth visualization updates. A basic form has also been implemented to send temperature data to the database.</p>"},{"location":"journal/#backend-and-database_1","title":"Backend and Database","text":"<p>A database has been structured and initially populated with simple measurement data. The backend is powered by PHP, which processes <code>POST</code> and <code>GET</code> requests using an <code>action</code> parameter to handle data submission and retrieval efficiently. The current implementation focuses on core functionality, with design considerations set aside for later development.</p>"},{"location":"journal/#next-steps_2","title":"Next Steps","text":"<p>The upcoming phase involves connecting an Arduino to the system, enabling real-time sensor data collection. This will allow the database to be filled with actual temperature readings, further validating the data pipeline and system reliability.</p>"},{"location":"journal/#10th-february-2025","title":"10th February 2025","text":""},{"location":"journal/#holographic-technology","title":"Holographic Technology","text":""},{"location":"journal/#spinning-led-array","title":"Spinning LED Array","text":"<p>A volumetric display method that uses a rapidly rotating LED matrix or strip. The high-speed motion, combined with precise timing, creates a 3D floating image through persistence of vision (PoV). This is one of the simplest volumetric display techniques to implement.</p> <p>tutorial</p>"},{"location":"journal/#swept-surface-projection","title":"Swept Surface Projection","text":"<p>This approach involves projecting cross-sections of a 3D model onto a rapidly moving transparent screen. As the screen moves, it displays successive image slices, creating the illusion of a true volumetric hologram. The Voxon VX2-XL is a commercial example of this technique.</p>"},{"location":"journal/#holographic-fan-display","title":"Holographic Fan Display","text":"<p>A high-speed rotating LED blade that displays a 3D-like floating image in mid-air. The spinning motion, combined with precisely controlled LED lighting, creates the illusion of a hologram. This method is widely used for advertising displays.</p>"},{"location":"journal/#voxel-based-display-with-diffused-light","title":"Voxel-Based Display with Diffused Light","text":"<p>This technique manipulates light in a transparent medium (e.g., fog, glass, or an LED cube) to create a 3D image composed of voxels (3D pixels). It often requires laser-based projection or diffused light scattering to make each voxel visible.</p>"},{"location":"journal/#fauxlography","title":"Fauxlography","text":"<p>There are many illusions that can be used to simulate fake holographic images, providing the illusion of depth and projection without true volumetric rendering.</p>"},{"location":"journal/#peppers-ghost-musion-eyeliner","title":"Pepper's Ghost (Musion Eyeliner)","text":"<p>A 19th-century theater illusion that uses a semi-transparent reflective surface to superimpose images into real space. This method has been used for concerts, performances, and museum exhibits.</p> <p></p>"},{"location":"journal/#rotating-fans","title":"Rotating Fans","text":"<p>Similar to the holographic fan display, but with multiple blades or layered LED strips to create a more complex illusion of depth.</p>"},{"location":"journal/#volumetric-displays","title":"Volumetric Displays","text":"<p>While not true holography, volumetric displays project 2D cross-sections into a 3D space using swept-surface projection, spinning LED arrays, or diffused light techniques.</p>"},{"location":"journal/#5th-february-2025","title":"5th February 2025","text":"<p>Reflecting on my experience with a Three.js project during my summer internship, I got the idea of creating a Real-Time Cloud Coverage Visualizer. The concept involves 3D-printing a physical map and finding a way to display real-world cloud data dynamically. Several approaches came to mind, including Transparent OLED Displays, Transparent LCD Displays, Holographic Fan Displays, or even projecting light onto fabric, similar to the technique used in the Circulate exhibition.</p> <p>My previous project explored real-time 3D cloud visualization in a digital space, and now I want to experiment with bringing it into the physical world.</p> <p>\ud83d\udd17 Old Project: GitHub \u2013 Real-Time 3D Cloud Coverage Visualizer</p> <p></p>"},{"location":"journal/#4th-february-2025","title":"4th February 2025","text":"<p>To spark inspiration, I visited the Circulate \u2013 Photography Beyond Frames exhibition. The exhibit provided fascinating insights into how photographers push the boundaries of framing, exploring innovative ways to present their work beyond traditional constraints.</p> <p>This experience particularly inspired me to consider holographic visualization\u2014using data or images in a 3D space\u2014to expand on the concept of framing in new and immersive ways.</p> <p></p>"},{"location":"planning/","title":"Planning","text":""},{"location":"planning/#planning","title":"Planning","text":"<p>:)</p>"},{"location":"system_architecture/","title":"System Architecture","text":""},{"location":"system_architecture/#system-architecture","title":"System Architecture","text":""},{"location":"system_architecture/#introduction","title":"Introduction","text":"<p>This document provides an overview of the system structure, including hardware, software, databases, and network components. It illustrates how these elements interact and communicate.</p>"},{"location":"system_architecture/#system-architecture-diagram-sad01-sad16","title":"System Architecture Diagram (SAD#01 - SAD#16)","text":"<p>Open Image</p>"},{"location":"system_architecture/#legend-sad05","title":"Legend (SAD#05)","text":"<p>The following symbols are used in the diagram:</p> <ul> <li>\ud83d\udce6 Hardware Component \u2013 Physical devices like computers, servers, and embedded systems.</li> <li>\ud83e\udde9 Software Component \u2013 Applications, services, and other software parts.</li> <li>\ud83d\udcc4 Data Component \u2013 Things like databases and Docker images.</li> <li>\ud83d\udce1 Virtual Hardware Component \u2013 Virtual network elements like Docker networks.</li> <li>\ud83c\udf10 Cloud Icon \u2013 Represents the Internet or external networks.</li> <li>\ud83c\udf21\ufe0f Sensor Icon \u2013 Represents sensors.</li> </ul>"},{"location":"system_architecture/#components-overview","title":"Components Overview","text":""},{"location":"system_architecture/#embedded-systems-sad06","title":"Embedded Systems (SAD#06)","text":"<ul> <li>\ud83d\udce6 Hardware Component</li> <li>Includes IoT devices such as ESP32, Raspberry Pi, or similar microcontrollers.</li> <li>Communicates with the Host System or Cloud via MQTT, HTTP, or WebSockets.</li> </ul>"},{"location":"system_architecture/#webserver-iot-nginx-and-iot-nginx-dev-sad07","title":"Webserver (<code>iot-nginx</code> and <code>iot-nginx-dev</code>) (SAD#07)","text":"<ul> <li>\ud83e\udde9 Software Component</li> <li>Serves the frontend and backend.</li> <li>Handles API requests (<code>/api/</code>) and forwards them to <code>iot-php</code> and <code>iot-php-dev</code> using FastCGI (Port 9000).</li> <li>Routes <code>/phpmyadmin/</code> to <code>iot-phpmyadmin</code>.</li> <li>Uses Vite for hot-reloading in development.</li> <li>Uses Pushstream Websockets for direct communications with frontend and hardware.</li> </ul>"},{"location":"system_architecture/#database-system-mariadb-sad08","title":"Database System (MariaDB) (SAD#08)","text":"<ul> <li>\ud83d\udcc4 Data Component</li> <li>Runs inside <code>iot-mariadb</code> container.</li> <li>Contains two databases:</li> <li>atmos</li> <li>atmos_dev</li> <li>Used by the backend (<code>iot-php</code>) via MySQL (Port 3306).</li> </ul>"},{"location":"system_architecture/#docker-registry-local-and-dockerio-sad09","title":"Docker Registry (Local and docker.io) (SAD#09)","text":"<ul> <li>\ud83d\udcc4 Data Component</li> <li>Stores public and local Docker images:</li> <li><code>php:8.1-fpm</code></li> <li><code>mhart/alpine-node</code></li> <li><code>mariadb:latest</code></li> <li><code>node:latest</code></li> <li><code>phpmyadmin/phpmyadmin:latest</code></li> <li><code>nginx:1.24.0</code></li> <li><code>php-custom</code> (extends <code>php:8.1-fpm</code>)</li> <li><code>tunnel-custom</code> (extends <code>mhart/alpine-node</code>)</li> <li><code>nginx-custom</code> (extends <code>nginx:1.24.0</code>)</li> </ul>"},{"location":"system_architecture/#docker-host-sad10","title":"Docker Host (SAD#10)","text":"<ul> <li>\ud83d\udce1 Virtual Hardware Component</li> <li>Runs multiple Docker containers within the iot_default network.</li> <li>Key services:</li> <li><code>iot-nginx</code> \u2013 Webserver (Reverse Proxy)</li> <li><code>iot-php</code> \u2013 Backend API (PHP-FPM)</li> <li><code>iot-mariadb</code> \u2013 Database (MariaDB)</li> <li><code>phpmyadmin</code> \u2013 Database Management Tool</li> <li><code>iot-tunnel</code> \u2013 Public exposure (Localtunnel / SSH-Tunnel)</li> <li>Development environment:</li> <li><code>iot-vite</code> \u2013 Frontend Development Server (hot-reloading)</li> </ul>"},{"location":"system_architecture/#host-system-macbook-pro-sad11","title":"Host System (MacBook Pro) (SAD#11)","text":"<ul> <li>\ud83d\udce6 Hardware Component</li> <li>Runs macOS and serves as the primary development environment.</li> <li>Manages Docker containers and connects to GitLab Repository.</li> </ul>"},{"location":"system_architecture/#mobile-device-external-system-sad12","title":"Mobile Device (External System) (SAD#12)","text":"<ul> <li>\ud83d\udce6 Hardware Component</li> <li>Connects to <code>localtunnel server</code> via HTTPS to access the frontend.</li> <li>Uses Google Chrome on an iPad Air (2022, iOS).</li> </ul>"},{"location":"system_architecture/#network-access-point-sad13","title":"Network Access Point (SAD#13)","text":"<ul> <li>\ud83d\udce6 Stable Network Router</li> <li>Represents the Router Access Point.</li> <li>Connects the Host System, Mobile Device, and Embedded Systems to the Internet/Intranet (SAD#15).</li> </ul>"},{"location":"system_architecture/#gitlab-repository-sad14","title":"Gitlab repository (SAD#14)","text":"<ul> <li>\ud83d\udce6 Gitlab repository</li> <li>Allows push and pull to gitlab via SSL.</li> </ul>"},{"location":"system_architecture/#internetintranet-sad15","title":"Internet/Intranet (SAD#15)","text":"<ul> <li>\ud83c\udf10 Internet/Intranet</li> <li>Different Network abstractions allowing access over the Internet.</li> <li>Provides access to external services:</li> </ul>"},{"location":"system_architecture/#localtunnel-sad16-we-dont-have-an-ssh-tunnel","title":"Localtunnel (SAD#16) (We don't have an SSH Tunnel?)","text":"<ul> <li>\ud83e\udde9 Localtunnel server and \ud83e\udde9 Localtunnel Client</li> <li>LocalTunnel \u2013 Cloud endpoint</li> <li>LocalTunnel \u2013 Runs locally in Docker</li> <li>Allows Direct communication over HTTPS and HTTP to the Services.</li> <li>Serves Serve Nginx via Tunnel on port 80</li> </ul>"},{"location":"system_architecture/#communication-flow-overview-sad04","title":"Communication Flow Overview (SAD#04)","text":"Source Destination Protocol Port Purpose Host Repository GitLab Repository SSH 22 Push Code GitLab Repository Host Repository SSH 22 Pull Code Mobile Device: Browser LocalTunnel Server HTTPS 443 Public Access to Local Services Embedded System Reader LocalTunnel Server HTTPS 443 Fetch from Public Tunnel (Client.cpp) Embedded System Installation LocalTunnel Server HTTPS 443 Fetch from Public Tunnel (Client.cpp) iot-nginx Embedded System Installation HTTPS 443 Server Push (PushStream) LocalTunnel Server LocalTunnel Client Persistent TLS WebSocket 443 Tunnel Transport Layer LocalTunnel Client iot-nginx HTTP 80 Serve Nginx via Tunnel iot-nginx iot-php FastCGI 9000 API Backend (Prod) iot-php iot-mariadb MySQL 3306 Database Access (Prod) iot-phpmyadmin iot-mariadb MySQL 3306 Admin UI DB Access Docker Host Docker Registry (remote) HTTPS 443 Admin UI DB Access Docker Host Docker Registry (local) HTTPS 443 Pull/push custom local images LocalTunnel Client LocalTunnel Server WebSocket Push (TLS) 443 Push updates through tunnel (return)"},{"location":"embedded/code/","title":"Embedded code","text":""},{"location":"embedded/code/#embedded-code","title":"Embedded code","text":""},{"location":"embedded/code/#esp32-wroom-da-module-installation-device","title":"ESP32-WROOM-DA Module (Installation Device)","text":"<p>The ESP32 acts as the installation device with auditive and visual output modules. It fetches environmental data from the sensor devices over HTTPS from the API and updates the LED strip and plays a sound based on the received weather data. It also acts as a secure HTTPS server and fetches an HTTPS POST Request to NGINX Push Stream which allows WebSocket to update the current index of which device is currently displayed.</p> <p>Source Code for inspection</p>"},{"location":"embedded/code/#key-responsibilities","title":"Key Responsibilities","text":"<ul> <li>Uses WiFiManager for dynamic WiFi config to remove hardcoded credentials.</li> <li>Fetches latest sensor readings securely from the API (HTTPS GET).</li> <li>Rotates through every sensor reader every 5 seconds.</li> <li>Visualizes temperature on a WS2812B LED.</li> <li>Plays weather audio using a DFPlayer Mini.</li> <li>Hosts a self-signed HTTPS server.</li> <li>Pushes <code>currentIndex</code> updates to NGINX Push Stream (HTTPS POST).</li> </ul>"},{"location":"embedded/code/#libraries","title":"Libraries","text":"Library Name Version <code>ArduinoJson</code> 7.3.1 <code>WiFi</code> 3.1.3 <code>Networking</code> 3.1.3 <code>WiFiManager</code> 2.0.17 <code>Update</code> 3.1.3 <code>WebServer</code> 3.1.3 <code>DNSServer</code> 3.1.3 <code>FS</code> 3.1.3 <code>AsyncUDP</code> 3.1.3 <code>FastLED</code> 3.9.14 <code>NetworkClientSecure</code> 3.1.3 <code>DFRobotDFPlayerMini</code> 1.0.6"},{"location":"embedded/code/#board-manager","title":"Board Manager","text":"Platform Version <code>ESP32</code> 3.2.0"},{"location":"embedded/code/#wemos-d1-mini-reader-device","title":"WEMOS D1 Mini (Reader Device)","text":"<p>The WEMOS D1 Mini acts as a sensor reader Device. It reads values from input sensors and sends them over HTTPS to the backend API. These devices are scalable since they register themselves via their MAC Addresses.</p> <p>Source Code for inspection</p>"},{"location":"embedded/code/#key-responsibilities_1","title":"Key Responsibilities","text":"<ul> <li>Registers itself to the Database via MAC address through the API (HTTPS POST).</li> <li>Uses WiFiManager for dynamic WiFi config to remove hardcoded credentials.</li> <li>Lights up an LED once setup is done.</li> <li>Reads and send data to API every 2 seconds.</li> </ul>"},{"location":"embedded/code/#libraries_1","title":"Libraries","text":"Library Name Version <code>Wire</code> 1.0 <code>Adafruit BMP085</code> 1.2.4 <code>Adafruit BusIO</code> 1.17.0 <code>BH1750</code> 1.3.0 <code>DHT sensor library</code> 1.4.6 <code>WiFiManager</code> 2.0.17 <code>ESP8266WiFi</code> 1.0 <code>ESP8266WebServer</code> 1.0 <code>DNSServer</code> 1.1.1 <code>ArduinoJson</code> 7.3.1 <code>SPI</code> 1.0 <code>Adafruit Unified Sensor</code> 1.1.15"},{"location":"embedded/code/#board-manager_1","title":"Board Manager","text":"Platform Version <code>ESP8266</code> 3.1.2"},{"location":"embedded/requirements/","title":"System Requirements","text":""},{"location":"embedded/requirements/#system-requirements","title":"System Requirements","text":"<p>To build the embedded device, the following requirements from DLO must be fulfilled:</p> Requirement ID# Requirement MoSCoW Compliant EMBRQ#01 The embedded device acts as a client and sends measured sensor data to the application backend over http or https. MUST YES EMBRQ#02 The embedded device also acts as a server and receives status messages from the application backend over http or https. MUST YES EMBRQ#03 The embedded device contains at least two types of input sensors (e.g. LDR, buttons, joystick, capacitive touch, etc.). MUST YES EMBRQ#04 The embedded device contains at least two types of visual and/or sensory outputs (e.g. LED, LED Matrix, 7-segment display, motor, servo, actuator, LCD-screen, buzzer, etc.). MUST YES EMBRQ#05 The embedded device uses the WifiManager for configuration of SSID and password (PWD) for connecting to the network. MUST YES"},{"location":"embedded/requirements/#embrq01-proof-of-https-api-access-from-devices","title":"EMBRQ#01 \u2014 Proof of HTTPS API Access from Devices","text":"<p>Both devices can access the API via <code>https://yanisdeplazes.loca.lt</code> using HTTPS requests. They can fetch data using <code>GET</code> and upload sensor readings using <code>POST</code>.</p>"},{"location":"embedded/requirements/#get-fetch-devices","title":"GET: Fetch Devices","text":"<p>File: <code>Client.cpp</code> \u2014 Line 165 Source</p> <pre><code>String raw = httpGET(\"/api/device\");\n</code></pre>"},{"location":"embedded/requirements/#get-latest-reading-for-device","title":"GET: Latest Reading for Device","text":"<p>File: <code>Client.cpp</code> \u2014 Line 202 Source</p> <pre><code>String raw = httpGET(\"/api/views/LatestDeviceReadings?device_id=1\");\n</code></pre>"},{"location":"embedded/requirements/#post-register-device","title":"POST: Register Device","text":"<p>File: <code>Client.cpp</code> \u2014 Line 208 Source</p> <pre><code>StaticJsonDocument&lt;128&gt; doc;\ndoc[\"key\"] = mac;\ndoc[\"name\"] = \"Weather Station\";\n\nString payload;\nserializeJson(doc, payload);\nhttpPOST(\"/api/device\", payload, \"application/json\");\n</code></pre>"},{"location":"embedded/requirements/#post-send-reading-sensor-data","title":"POST: Send Reading + Sensor Data","text":"<p>File: <code>Client.cpp</code> \u2014 Line 258 Source</p> <pre><code>StaticJsonDocument&lt;1024&gt; doc;\ndoc[\"device_id\"] = deviceId;\nJsonArray arr = doc.createNestedArray(\"sensor_data\");\n\nJsonObject obj = arr.createNestedObject();\nobj[\"sensor_id\"] = 1;\nobj[\"value\"] = 24.5;\n\nString payload;\nserializeJson(doc, payload);\nhttpPOST(\"/api/reading-with-sensordata\", payload, \"application/json\");\n</code></pre>"},{"location":"embedded/requirements/#used-libraries","title":"Used Libraries","text":"<ul> <li><code>WiFiClientSecure</code> for HTTPS</li> <li><code>ArduinoJson</code> for JSON handling</li> </ul> <p>All traffic to and from the device is encrypted and uses HTTPS.</p>"},{"location":"embedded/requirements/#embrq02","title":"EMBRQ#02","text":"<p>The ESP32 device hosts a HTTPS server using a self-signed certificate. It exposes the <code>/index</code> route to get the current index of what device is currently displayed for a fallback.</p>"},{"location":"embedded/requirements/#get-index-endpoint","title":"GET: /index Endpoint","text":"<p>File: <code>server.cpp</code> \u2014 Line ~45 Source</p> <pre><code>esp_err_t handle_index(httpd_req_t *req) {\nchar resp_str[32];\nsnprintf(resp_str, sizeof(resp_str), \"{\\\"index\\\": %d}\", currentIndex);\n\nhttpd_resp_set_type(req, \"application/json\");\nreturn httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);\n}\n</code></pre>"},{"location":"embedded/requirements/#https-server-setup","title":"HTTPS Server Setup","text":"<p>File: <code>server.cpp</code> \u2014 Line ~63 Source</p> <pre><code>httpd_ssl_config_t conf = HTTPD_SSL_CONFIG_DEFAULT();\nconf.servercert = (const uint8_t *)server_cert;\nconf.servercert_len = strlen(server_cert) + 1;\nconf.prvtkey_pem = (const uint8_t *)server_key;\nconf.prvtkey_len = strlen(server_key) + 1;\n\nesp_err_t ret = httpd_ssl_start(&amp;server, &amp;conf);\n</code></pre>"},{"location":"embedded/requirements/#used-libraries_1","title":"Used Libraries","text":"<ul> <li><code>httpd_ssl</code> from ESP-IDF for TLS web server</li> <li><code>esp_tls</code> for certificate handling</li> <li>Custom <code>cert.h</code> and <code>key.h</code> headers for in-memory PEM cert and key</li> </ul>"},{"location":"embedded/requirements/#nginx-settings","title":"NGINX Settings","text":"<p>The system uses NGINX's Push Stream Module to broadcast the current index when it changes. The subscribed client (IPad or Browser) can receive real-time updates over the WebSocket-like connection.</p> <p>File: <code>nginx.conf</code> \u2014 Line ~51 Source</p> <pre><code>    location ^~ /api/installation/ {\nrewrite ^/api/installation(/.*)$ $1 break;\nproxy_pass https://100.74.255.21; // Hardcoded: not optimal\nproxy_ssl_verify off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\n}\n</code></pre>"},{"location":"embedded/requirements/#embrq03","title":"EMBRQ#03","text":""},{"location":"embedded/requirements/#embrq03-sensor-data-collection","title":"EMBRQ#03 \u2014 Sensor Data Collection","text":"<p>The reader device integrates 4 types of sensors (DHT11, BMP180, BH1750, analog water sensor) to measure environmental data and upload it to the backend API via HTTPS. Each sensor is initialized and polled in the main loop, with results printed to the serial monitor and sent as a single payload to the API.</p>"},{"location":"embedded/requirements/#loop","title":"Loop","text":"<p>File: <code>sensors.ino</code> \u2014 Lines ~119 Source</p> <pre><code>void loop() {\nreadDht11();\nreadBh1750();\nreadWaterSensor();\nreadBmp180();\n// ...\n}\n</code></pre>"},{"location":"embedded/requirements/#reading-functions","title":"Reading Functions","text":"<p>File: <code>sensors.ino</code> \u2014 Lines ~134 Source</p> <pre><code>void readDht11() {\nfloat temp = dht.readTemperature();\nfloat hum = dht.readHumidity();\nif (!isnan(temp)) sensorData[0].value = temp;\nif (!isnan(hum)) sensorData[1].value = hum;\n}\n\nvoid readBh1750() {\nfloat lux = lightMeter.readLightLevel();\nif (lux &gt;= MIN_VALID_LUX) {\nsensorData[IDX_BH1750_LUX].value = lux;\n}\n}\n\nvoid readWaterSensor() {\nsensorData[IDX_WATER_ANALOG].value = analogRead(WATERPIN);\n}\n\nvoid readBmp180() {\nif (!bmpReady) return;\n\nsensorData[IDX_BMP180_TEMP].value = bmp.readTemperature();\nsensorData[IDX_BMP180_PRESSURE].value = bmp.readPressure() / PA_TO_HPA_DIVISOR;\n}\n</code></pre>"},{"location":"embedded/requirements/#used-libraries_2","title":"Used Libraries","text":"<ul> <li><code>DHT</code> for temperature and humidity (DHT11)</li> <li><code>Adafruit_BMP085</code> for temperature and pressure (BMP180)</li> <li><code>BH1750</code> for ambient light (lux)</li> <li><code>Wire</code> (I2C) for communication</li> </ul>"},{"location":"embedded/requirements/#embrq04","title":"EMBRQ#04","text":"<p>Both devices have output components (3 in total). They allow the for visually or audibly feedback from weather data.</p> <ul> <li>LED (Visualize when Setup is done)</li> <li>WS2812B Ledstrip (Visualize Temperature)</li> <li>Mini MP3 DFPlayer Player (Plays sound depending on weather)</li> </ul>"},{"location":"embedded/requirements/#led","title":"LED","text":"<p>File: <code>sensors.ino</code> \u2014 Lines ~111 Source</p> <pre><code>  digitalWrite(WIFI_LED_PIN, HIGH);\n</code></pre>"},{"location":"embedded/requirements/#ws2812b-ledstrip","title":"WS2812B Ledstrip","text":"<p>File: <code>LEDManager.cpp</code> \u2014 Lines ~50 Source</p> <pre><code>void initLEDs() {\nFastLED.addLeds&lt;LED_TYPE, LED_PIN, LED_COLOR_ORDER&gt;(leds, NUM_LEDS);\nFastLED.setBrightness(LED_BRIGHTNESS);\n}\n</code></pre> <p>File: <code>LEDManager.cpp</code> \u2014 Lines ~86 Source</p> <pre><code>void showColor(float temp) {\nCRGB color = (temp &gt;= TEMP_COLOR_THRESHOLD)\n? interpolateColor(temp, TEMP_COLOR_THRESHOLD, TEMP_COLOR_MAX, COLOR_WARM_MIN, COLOR_WARM_MAX)\n: interpolateColor(temp, TEMP_COLOR_MIN, TEMP_COLOR_THRESHOLD, COLOR_COLD_MIN, COLOR_COLD_MAX);\n\nfor (int i = LOOP_START_INDEX; i &lt; NUM_LEDS; i++) {\nleds[i] = color;\n}\n\nFastLED.show();\n\nSerial.printf(\"Static Temp Color \u2192 R: %d, G: %d, B: %d\\n\", color.r, color.g, color.b);\n}\n</code></pre>"},{"location":"embedded/requirements/#mini-mp3-dfplayer-player","title":"Mini MP3 DFPlayer Player","text":"<p>File: <code>DFPlayerManager.cpp</code> \u2014 Lines ~60 Source</p> <pre><code>void initDFPlayer(HardwareSerial* serial, int rx, int tx) {\ndfSerial = serial;\nrxPin = rx;\ntxPin = tx;\n\ndfSerial-&gt;begin(DFPLAYER_BAUDRATE, SERIAL_8N1, rxPin, txPin);\n\nif (!player.begin(*dfSerial)) {\nSerial.println(\"DFPlayer init failed\");\nwhile (true); // Halt if initialization fails\n}\n\nsetVolume(currentVolume);\n}\n</code></pre> <p>File: <code>DFPlayerManager.cpp</code> \u2014 Lines ~L117 Source</p> <pre><code>void playTrack(uint8_t track) {\nif (track != lastTrackPlayed) {\nSerial.println(\"Playing new Track\");\nSerial.println(track);\nplayer.loop(track);\nlastTrackPlayed = track;\n}\n}\n</code></pre>"},{"location":"embedded/requirements/#libraries-used","title":"Libraries Used","text":"<ul> <li>DFRobotDFPlayerMini</li> <li>FastLED</li> </ul>"},{"location":"embedded/requirements/#embrq05","title":"EMBRQ#05","text":"<p>Both devices use the WiFiManager library for the network setup. If no credentials are stored, it launches a portal for configuration:</p> <ul> <li>No hardcoded credentials</li> <li>Portal fallback</li> <li>Auto-reconnect to known networks</li> <li>Reboots if config times out</li> </ul> <p>File: installation: <code>WiFiSetup.cpp</code> \u2014 Lines ~21 Source</p> <p>File: sensors: <code>WiFiSetup.cpp</code> \u2014 Lines ~21 Source</p> <pre><code>void connectToWiFi() {\nwifiManager.setConfigPortalTimeout(PORTAL_TIMEOUT_SEC);\n\nif (!wifiManager.autoConnect(WIFI_AP_NAME, WIFI_AP_PASSWORD)) {\nSerial.println(\"WiFi connection failed. Restarting...\");\ndelay(RESTART_DELAY_MS);\nESP.restart();\n}\n\nSerial.println(\"WiFi connected.\");\nSerial.print(\"IP Address: \");\nSerial.println(WiFi.localIP());\n}\n</code></pre>"},{"location":"embedded/requirements/#libraries-used_1","title":"Libraries Used","text":"<ul> <li>WiFiManager</li> </ul>"},{"location":"embedded/technical_documentation/","title":"Technical documentation","text":""},{"location":"embedded/technical_documentation/#technical-documentation","title":"Technical documentation","text":""},{"location":"embedded/technical_documentation/#wiring-diagram","title":"Wiring Diagram","text":"<p>The wiring diagram is a visual representation of the electrical connections between components in the system. It showcaces how power, datalines and modules are connected can help for replication.</p>"},{"location":"embedded/technical_documentation/#installation","title":"Installation","text":"<p>Core installation, which includes a central ESP32 and output modules (LED strips and audio playback).</p> <p></p>"},{"location":"embedded/technical_documentation/#sensors","title":"Sensors","text":"<p>Dedicated Sensor reader, which includes a WEMOS and input modules (temperature, light, humidity and air pressure) aswell as an LED Output.</p> <p></p> <p>This is the compact version which is currently used on a small breadboard. (No powerlines)</p> <p></p>"},{"location":"embedded/technical_documentation/#kicad","title":"KiCad","text":""},{"location":"embedded/technical_documentation/#bill-of-materials","title":"Bill of Materials","text":"<p>The Bill of Materials provides a detailed breakdown of the components used in this project. It showcaces different details on the individual modules and can help for replication.</p> Part # Manufacturer Description Qty Unit Price (incl. VAT) Subtotal (incl. VAT) Tolerance MTBF Product URL Datasheet URL ESP-WROOM-32 Dev Board ELEGOO ESP32 WiFi/BLE Dev Board with USB Type-C 1 \u20ac9.00 \u20ac9.00 \u00b15% (I/O spec) ~1,000,000h Product Datasheet WMD1MINIV4 LOLIN Wemos D1 Mini V4 Compact ESP8266 WiFi Development Board 1 \u20ac5.67 \u20ac5.67 \u00b15% (I/O spec) ~1,000,000h Product Datasheet WATER-SENSOR OEM (DIYables) Analog water leak detector (Arduino/ESP compatible) 1 \u20ac1.44 \u20ac1.44 \u00b110% (analog range) N/A Product Datasheet GY-302 BH1750 OEM (Rohm Module) Digital light intensity sensor (lux) 1 \u20ac6.33 \u20ac6.33 \u00b13% ~100,000h Product Datasheet Micro SD Card 4GB Cloudisk Class 4 microSD storage card 1 \u20ac6.00 \u20ac6.00 \u00b15% (voltage) ~500,000h Product Datasheet GY-68 BMP180 OEM (Bosch Sensor) Pressure &amp; temperature sensor module 1 \u20ac1.83 \u20ac1.83 \u00b11 hPa ~200,000h Product Datasheet WS2812B LED Strip OEM (Worldsemi) Individually addressable RGB LED strip (144 LEDs/m) 1m \u20ac12.00 \u20ac12.00 \u00b110% (brightness binning) ~50,000h Product Datasheet DFPLAYER-MINI DFRobot MP3 player module with microSD input &amp; speaker support 1 \u20ac4.55 \u20ac4.55 \u00b15% ~100,000h Product Datasheet Speaker OEM 3W 4\u03a9 speaker for audio output 2 \u20ac4.50 \u20ac9.00 \u00b15% (impedance) N/A Product Datasheet KY-015 DHT11 Keyes Temperature &amp; humidity sensor module 1 \u20ac1.90 \u20ac1.90 \u00b12\u00b0C / \u00b15% RH ~200,000h Product Datasheet LED-GREEN OEM (Kingbright) 5mm green LED (from pack of 50) 1 \u20ac0.06 \u20ac0.06 \u00b120% (luminous flux) ~100,000h Product Datasheet JUMPER-WIRE-40PCS OEM 20cm male/female jumper wires (3 x 40 pieces) 49 \u20ac0.09 \u20ac4.41 N/A N/A Product Datasheet Mini BREADBOARD OEM 170-point solderless breadboard 1 \u20ac1.60 \u20ac1.60 N/A N/A Product Datasheet BREADBOARD-MB102 OEM 830-point full-size solderless breadboard 2 \u20ac2.40 \u20ac4.80 N/A N/A Product Datasheet RES220OHM-1/4W OEM (UniOhm) 220\u03a9 resistor \u00b11%, 0.25W (from 100 pcs pack) 1 \u20ac0.05 \u20ac0.05 \u00b11% ~1,000,000h Product Datasheet USB-C-CHARGER-5V1A MatauMahi USB-C charger cable for power banks and devices (5V/1A) 2 \u20ac7.99 \u20ac15.98 \u00b15% (output voltage) N/A Product N/A <p>Disclaimer: The Tolerance and MTBF values listed are approximations provided by ChatGPT which uses general component knowledge and public datasheets. These values serve as a practical estimate and should be cross-checked with manufacturer specifications for critical designs.</p>"},{"location":"research/research-implementation/","title":"\ud83d\udd0e Research to Market: Implementation","text":""},{"location":"research/research-implementation/#research-to-market-implementation","title":"\ud83d\udd0e Research to Market: Implementation","text":"<p>The NGINX server was configured with the following logic:</p> <pre><code>nginx\nlocation = /api/installation/ws {\n    push_stream_subscriber websocket;\n    push_stream_channels_path \"installation\";\n    push_stream_websocket_allow_publish off;\n    push_stream_ping_message_interval 30s;\n    push_stream_message_template \"~text~\";\n}\n\nlocation = /api/installation/publish {\n    push_stream_publisher admin;\n    push_stream_channels_path \"installation\";\n}\n</code></pre> <p>The ESP32 acts as a secure HTTPS client and publishes the <code>currentIndex</code> to the <code>/api/installation/publish</code> endpoint when changed.</p> <pre><code>void sendCurrentIndexUpdate(int currentIndex) {\nString payload = \"{\\\"index\\\": \" + String(currentIndex) + \"}\";\nString response = httpPOST(\"/api/installation/publish\", payload, \"application/json\");\n}\n</code></pre> <p>The frontend connects to the <code>/api/installation/ws</code> endpoint and updates the carousel when receiving the new <code>index</code>.</p> <pre><code>static async connect() {\nthis.socket = new WebSocket(this.URL);\nthis.socket.addEventListener(\"message\", (event) =&gt; {\nconst data = JSON.parse(event.data);\nif (data?.index !== undefined) {\nthis.carousel.setActiveIndex(data.index);\n}\n});\n}\n</code></pre> <p>A short demo video demonstrates how the frontend instantly reflects index changes sent by the ESP32, confirming the low-latency performance of the system.</p>    Your browser does not support the video tag."},{"location":"research/research/","title":"\ud83d\udd0e Research to market","text":""},{"location":"research/research/#research-to-market","title":"\ud83d\udd0e Research to market","text":""},{"location":"research/research/#introduction","title":"Introduction","text":"<p>Atmos transforms real-time weather data into a holographic, audio-visual installation, creating a multi-sensory experience that blends science, technology, and art.</p> <p>The installation uses a frontend which is served via <code>nginx</code> and is displayed on an iPad as part of the Pepper\u2019s Ghost illusion. With this setup, even small delays break the illusion and negatively impact the user experience, which was observed during the user testing conducted during this project.</p> <p>Real-Time communication is particularly relevant for developers working with embedded devices that need to send state updates directly to another service in real time. Relying on repeated GET requests on both sites is not ideal, since it can be quite resource-intensive for the embedded devices.</p> <p>Target group: Developers working on interactive or responsive installations, especially those using systems where another system (in this case, a weather-based holographic display) must reflect state changes instantly in sync with the embedded device.</p> <p>Solving this challenge it not only improves system communications, but also opens up new possibilities for creating synchronized, immersive experiences in today\u2019s increasingly connected world.</p>"},{"location":"research/research/#research-question","title":"Research question","text":"<p>Area: Web and Embedded</p> <p>Main question: How to enable real-time communication between an embedded device and a web-based frontend, with minimal delay and resources?</p> <p>Sub-questions:</p> <ul> <li>What protocols and technologies are used for real-time communication?</li> <li>How can an ESP32 transmit data to a web service in real time?</li> <li>What frontend techniques are required to ensure instant feedback from the embedded system?</li> </ul>"},{"location":"research/research/#research-method","title":"Research method","text":"<p>In order to answer the research questions, a practice-based experimental approach was used, supported by technology landscape analysis. This method helped to directly test and evaluate the communication between an embedded ESP32 device and the frontend.</p> <p>During the research one ESP32 device was connected to a backend server using different approaches. The results were observed and analyzed through with the current projects infrastructure.</p> <p>Response time was tested visually with the installation.</p>"},{"location":"research/research/#research-results","title":"Research Results","text":"<p>In the early research phase, WebSocket functionality was implemented directly on the ESP32 using the HTTPS_Server_Generic library (Khoih-Prog, n.d.). This setup allowed HTTPS Communication and WebSocket handling, but it proved unreliable under when used for updating the IPad Display in real-time. The WebSocket Server only allowed a limited amound of connection, the library itself was deprecated and prompted other issues to the infrastructure and during user testing it proved that the delay was just too big for a good user experience.</p> <pre><code>void MyWebSocketHandler::onMessage(WebsocketInputStreambuf *input) {\n// echo logic\nsend(msg.c_str(), SEND_TYPE_TEXT);\n}\n</code></pre> <p>Therefore it was clear, that either a hardware upgrade or an architectural change was necessary to meet requirements of the installation.</p> <p>Since the existing system already uses an NGINX server, further research led to the use of <code>ngx_http_push_stream_module</code> (Wandenberg, n.d.). This solution allowed the ESP32 to send data to a single HTTPS endpoint, while NGINX managed WebSocket broadcasting to one or more clients. This reduced the resources used on the ESP32 and allows scalability.</p>"},{"location":"research/research/#implementation","title":"Implementation","text":"<p>Explore the Implementation</p>"},{"location":"research/research/#conclusions","title":"Conclusions","text":"<p>This research explored how real-time communication between an embedded device and a web-based frontend can be achieved with minimal delay and resource usage.</p> <p>Main question: How to enable real-time communication between an embedded device and a web-based frontend, with minimal delay and resources?</p> <p>Conclusion:</p> <ul> <li>Using WebSocket directly on the ESP32 proved unstable and inefficient, especially under load.</li> <li>NGINX server using the <code>ngx_http_push_stream_module</code> offered a more reliable and scalable solution.</li> </ul> <p>Sub-questions:</p> <ul> <li> <p>What protocols and technologies are used for real-time communication?   WebSockets is still the standard for real-time web communication. (WHATWG, 2024; MDN Web Docs, 2024). In this project, a reverse proxy with NGINX enables efficient and scalable handling of WebSocket connections.</p> </li> <li> <p>How can an ESP32 transmit data to a web service in real time?   The ESP32 sent HTTPS POST requests to a single endpoint on the NGINX server, which then handled broadcasting via WebSockets.</p> </li> <li> <p>What frontend techniques are required to ensure instant feedback from the embedded system?   A WebSocket client in the frontend subscribed to the NGINX and updates the display as soon as new index arrives.</p> </li> </ul> <p>These conclusions are supported by testing.</p>"},{"location":"research/research/#recommendations","title":"Recommendations","text":"<p>Based on the results of this research, several recommendations can be made for future improvement and exploration:</p> <ul> <li>Secure the communication by restricting WebSocket access to authorized clients to ensure data integrity.</li> <li>Add bidirectional communication to allow the web client to control things on the embedded device and back.</li> <li>Add scalability by supporting multiple channels for syncing data across several displays and devices in larger installations.</li> </ul>"},{"location":"research/research/#sources-and-references","title":"Sources and References","text":"<p>Khoih-Prog. (n.d.). HTTPS_Server_Generic: HTTPS/HTTP Server Library for ESP32, WT32_ETH01, ESP32 + LwIP W5500, W6100, ENC28J60. GitHub. https://github.com/khoih-prog/HTTPS_Server_Generic</p> <p>Wandenberg. (n.d.). nginx-push-stream-module: A pure stream HTTP push technology for your NGINX setup. GitHub. https://github.com/wandenberg/nginx-push-stream-module</p> <p>MDN Web Docs. (2024, September 25). WebSocket - Web APIs. Mozilla. https://developer.mozilla.org/en-US/docs/Web/API/WebSocket</p> <p>WHATWG. (2024, January 24). WebSockets Standard. https://websockets.spec.whatwg.org/</p>"},{"location":"uxd/concept/","title":"Concept","text":""},{"location":"uxd/concept/#concept","title":"Concept","text":""},{"location":"uxd/concept/#vision","title":"Vision","text":"<p>Atmos transforms real-time weather data into a holographic, audio-visual installation, creating a multi-sensory experience that blends science, technology, and art.</p>"},{"location":"uxd/concept/#mission","title":"Mission","text":"<ul> <li>To reimagine weather by integrating light, and sound.</li> <li>To bridge data and art, making it engaging and intuitive.</li> <li>To create an immersive space where people can see, and hear the weather.</li> </ul>"},{"location":"uxd/concept/#values","title":"Values","text":"<ul> <li>Futuristic \u2013 Pushing boundaries with real-time visuals.</li> <li>Immersion \u2013 Experiencing through light, sound, and holography.</li> <li>Connectivity \u2013 Linking differet physical devices into one network.</li> </ul>"},{"location":"uxd/concept/#users-user-needs","title":"Users &amp; User Needs","text":""},{"location":"uxd/concept/#personas","title":"Personas","text":"<p>To define the Target users, Proto Personas were used. These are based on assumptions rather than on user research. The selected Personas have a narrow scope and focus on the specific product instead of representing users across multiple products.</p> <p>The following framework was used to describe each persona:</p> <ul> <li>Name, age, gender, and a photo</li> <li>Tagline describing what they do</li> <li>Experience level</li> <li>Context of interaction</li> <li>Goals and concerns</li> <li>A direct quote</li> </ul> <p>This is based on the Nielsen Norman Group - Personas: Study Guide.</p> <p></p> <p></p>"},{"location":"uxd/concept/#user-stories","title":"User Stories","text":"<p>To define the User Needs, user stories were used. Each user story follows the as a [persona], I [want to], [so that].</p> <p>This is based on the Atlassian - User story template and examples.</p> <p></p> <p></p>"},{"location":"uxd/concept/#main-goal","title":"Main Goal","text":"<p>The main goal of Atmos is to allow users to experience real-time weather data in a way that is engaging, immersive, and artistic without the use of numbers as a value. It should create an environment where users can feel like they are truly experiencing the weather through visuals and sounds.</p> <p>This goal should be achieved within the 10 weeks of the IOT Program.</p>"},{"location":"uxd/concept/#product-requirements","title":"Product Requirements","text":"<p>The product requirements ensure that Atmos meets the user expectations. Each of these product requirement features should be fully functional by week 10.</p>"},{"location":"uxd/concept/#real-time-weather-visualization","title":"Real-Time Weather Visualization","text":"<p>Visuals, lighting, and sound must update within 5 seconds of weather changes.</p>"},{"location":"uxd/concept/#intuitive-user-experience","title":"Intuitive User Experience","text":"<p>Experience must feel natural, intuitive, and technologically innovative.</p>"},{"location":"uxd/concept/#event-customization-remote-control","title":"Event Customization &amp; Remote Control","text":"<p>Remote control via a web interface, with settings stored via API/database.</p>"},{"location":"uxd/concept/#scalability-replicability","title":"Scalability &amp; Replicability","text":"<p>The system must be modular, scalable, and well-documented for replication.</p>"},{"location":"uxd/concept/#sketches-and-ai-generated-concepts","title":"Sketches and AI Generated Concepts","text":""},{"location":"uxd/concept/#ai-generated-concept-with-chat-gpt","title":"AI Generated Concept with Chat GPT","text":""},{"location":"uxd/concept/#version-history","title":"Version History","text":"<p>This section lists the project's Concept file, with each version reflecting incremental updates and refinements.</p> <p>Project Concept</p> <ul> <li>005 - add Personas and User Stories</li> <li>004 - add Values</li> <li>003 - add Mission</li> <li>002 - add Vision</li> <li>001 - add Project Name &amp; Tagline</li> </ul>"},{"location":"uxd/concept_design/","title":"Concept & Design","text":""},{"location":"uxd/concept_design/#concept-design","title":"Concept &amp; Design","text":"<p>This page serves as an index page for both concept and design pages.</p> <ul> <li>Explore the Project Concept</li> <li>Explore the Project Design</li> </ul>"},{"location":"uxd/conclude_reflect/","title":"Conclude & Reflect","text":""},{"location":"uxd/conclude_reflect/#conclude-reflect","title":"Conclude &amp; Reflect","text":""},{"location":"uxd/conclude_reflect/#video-demo","title":"Video Demo","text":"Your browser does not support the video tag."},{"location":"uxd/conclude_reflect/#requirements","title":"Requirements","text":""},{"location":"uxd/conclude_reflect/#main-goal","title":"Main Goal","text":"<p>Description: The main goal of Atmos is to allow users to experience real-time weather data in a way that is engaging, immersive, and artistic without the use of numbers as a value. It should create an environment where users can feel like they are truly experiencing the weather through visuals and sounds.</p> <p>The main goal is fully met \u2014 the installation offers an experience that reflects live weather changes and is engaging, immersive and artistic, as the user testing during this project showed.</p>"},{"location":"uxd/conclude_reflect/#real-time-weather-visualization","title":"Real-Time Weather Visualization","text":"<p>Description: Visuals, lighting, and sound must update within 5 seconds of weather changes.</p> <p>The system allows a maximum delay of 4.5 seconds. Which therefore meets the requirement.</p>"},{"location":"uxd/conclude_reflect/#intuitive-user-experience","title":"Intuitive User Experience","text":"<p>Description: Interaction must feel natural, intuitive, and technologically innovative.</p> <p>The User tests showed a high satisfaction and strong interest in the technology used. (5 out of 5 people asked) Which therefore meets the requirement.</p> <p>Recommendation:</p> <ul> <li>Add animation and sound on startup.</li> </ul>"},{"location":"uxd/conclude_reflect/#event-customization-remote-control","title":"Event Customization &amp; Remote Control","text":"<p>Requirement: Remote control via a web interface, with settings stored via API/database.</p> <p>The Settings features were set in the database and customizable via the Website. Which therefore meets the requirement.</p> <p>Recommendation:</p> <ul> <li>Add a live preview showing how changes affect the visual blob and background in real time.</li> </ul>"},{"location":"uxd/conclude_reflect/#scalability-replicability","title":"Scalability &amp; Replicability","text":"<p>Requirement: The system must be modular, scalable, and well-documented for replication.</p> <p>The current architecture supports scalability. Each device is uniquely identified via MAC address and automatically registered. The sensor setup is also extendable. Which therefore meets the requirement.</p> <p>With the current documentation it should be really easy to replicate it. (Must be tested)</p> <p>Recommendation:</p> <ul> <li>Add a modular sensors system, which allow new sensor types to be added easily and influencing how the installation and website reacts to different data inputs.</li> </ul>"},{"location":"uxd/conclude_reflect/#failures","title":"Failures","text":""},{"location":"uxd/conclude_reflect/#kerf-not-optimal","title":"KERF not optimal","text":"<p>Goal: Precise cuts for the cube via makercase. Issue: The kerf was a bit too tight which made it hard to assemble the cubes. Fix: Sanded them down. Next time: Test kerf on some small scale beforehand.</p>"},{"location":"uxd/conclude_reflect/#needed-support-for-sensor","title":"Needed support for sensor","text":"<p>Goal: Fit all sensors on top of the cube. Issue: The water and KY sensors weren't measured beforehand and overlapped. Fix: Added little MDF support plates to lift them. Next time: Actually measure the sensor size beforehand, not just the connector end.</p>"},{"location":"uxd/conclude_reflect/#plexiglas-too-expensive","title":"Plexiglas too expensive","text":"<p>Goal: Use clear material for the Pepper\u2019s Ghost effect. Issue: Plexiglas was way too expensive. Fix: No Fix, had to get the plexiglas. Next time: Look into cheaper stuff during material research.</p>"},{"location":"uxd/conclude_reflect/#hard-to-see-in-bright-spaces","title":"Hard to see in bright spaces","text":"<p>Goal: Make sure the visuals work in the presentaiton room. Issue: In bright rooms, the hologram wasn't really visible. Fix: Added black foam around it for presentations in bright spaces. Next time: Use a brighter screen and build in some shading.</p>"},{"location":"uxd/create_test/","title":"Create & Test","text":""},{"location":"uxd/create_test/#create-test","title":"Create &amp; Test","text":""},{"location":"uxd/create_test/#digital-manufacturing","title":"DIGITAL MANUFACTURING","text":""},{"location":"uxd/create_test/#devices-and-material","title":"Device(s) and Material","text":"<p>The device and materials were selected based on the available tools at the MakersLab at HVA. Tried to be as cost-effective as possible while still using good materials to match the needs of the product.</p>"},{"location":"uxd/create_test/#device","title":"Device","text":"<p>Laser Cutter Used for cutting all components (MDF and acrylic). Which is quiet precise and easy to use and also doesn't take long time if something might go wrong.</p>"},{"location":"uxd/create_test/#reference-makerslab-resources","title":"Reference: MakersLab Resources","text":"<p>Refer to the following sites for the laser cutter at HVA:</p> <ul> <li>MakersLab Laser Cutter Overview</li> <li>Laser Cutter Cheatsheet (PDF)</li> </ul>"},{"location":"uxd/create_test/#material","title":"Material","text":"<p>MDF (Medium-Density Fiberboard)</p> <ul> <li> <p>9mm MDF</p> </li> <li> <p>Quantity: 1 sheet</p> </li> <li>Size: 1220 mm \u00d7 610 mm \u00d7 9 mm</li> <li>Use: Main installation cube</li> <li> <p>Reasoning: Strong and affordable.</p> </li> <li> <p>4mm MDF</p> </li> <li>Quantity: 1 sheet</li> <li>Size: 500 mm \u00d7 350 mm \u00d7 4 mm</li> <li>Use: Reader cube and smaller support elements</li> <li>Reasoning: Lightweight and affordable.</li> </ul> <p>Acrylic (Plexiglas)</p> <ul> <li>3mm Acrylic</li> <li>Quantity: 1 sheet</li> <li>Size: 600 mm \u00d7 1200 mm \u00d7 3 mm</li> <li>Use: Transparent parts for Pepper's Ghost cube</li> <li>Reasoning: Provides best optical clarity.</li> </ul>"},{"location":"uxd/create_test/#justification","title":"Justification","text":"<p>These materials are accessible and effective for the structural and aesthetic needs.</p>"},{"location":"uxd/create_test/#manufacturing-settings","title":"Manufacturing Settings","text":"<p>The following predefined settings were used from the laser cutter at the HVA MakersLab.</p> <p>Acrylic 3mm Cutout</p> <ul> <li>Speed: 15 mm/s</li> <li>Power: 70%</li> <li>Min Power: 70%</li> <li>Passes: 1</li> </ul> <p>MDF 4mm Cutout</p> <ul> <li>Speed: 30 mm/s</li> <li>Power: 65%</li> <li>Min Power: 60%</li> <li>Passes: 1</li> </ul> <p>MDF 9mm Cutout</p> <ul> <li>Speed: 12 mm/s</li> <li>Power: 80%</li> <li>Min Power: 75%</li> <li>Passes: 1</li> </ul>"},{"location":"uxd/create_test/#optimisations","title":"Optimisations","text":"<ul> <li>Paths were merged to one file to reduce laser time.</li> <li>Nesting of parts for minimal waste.</li> <li>Labels and unnecessary paths removed from SVG files.</li> </ul>"},{"location":"uxd/create_test/#process","title":"Process","text":""},{"location":"uxd/create_test/#laser-cut-material","title":"Laser Cut Material","text":""},{"location":"uxd/create_test/#1-laser-cut-9mm-mdf-for-installation","title":"1. Laser Cut 9mm MDF for Installation","text":"<ul> <li>Place the 9mm MDF plate on the laser bed</li> <li>Open the laser cutting software and import the SVG file: (2024-04-04_installation_mdf_9mm.svg)</li> <li>Asign 9mm MDF Settings to the cutout</li> <li>Send the file to the machine and load it</li> <li>Calibrate the laser focus manually</li> <li>Set the origin point and use the framing function to verify alignment</li> <li>Recalibrate if needed, then start the cutting process</li> </ul>"},{"location":"uxd/create_test/#2-laser-cut-4mm-mdf-for-sensor-reader","title":"2. Laser Cut 4mm MDF for Sensor Reader","text":"<ul> <li>Place the 4mm MDF plate on the laser bed</li> <li>Open the laser cutting software and import the SVG file: (2024-04-04_installation_mdf_9mm.svg)</li> <li>Asign 9mm MDF Settings to the cutout</li> <li>Send the file to the machine and load it</li> <li>Calibrate the laser focus manually</li> <li>Set the origin point and use the framing function to verify alignment</li> <li>Recalibrate if needed, then start the cutting process</li> </ul>"},{"location":"uxd/create_test/#3-laser-cut-3mm-acrylic-for-installation","title":"3. Laser Cut 3mm Acrylic for Installation","text":"<ul> <li>Place the 3mm Acrylic plate on the laser bed</li> <li>Open the laser cutting software and import the SVG file: (2024-04-04_installation_mdf_9mm.svg)</li> <li>Asign 9mm MDF Settings to the cutout</li> <li>Send the file to the machine and load it</li> <li>Calibrate the laser focus manually</li> <li>Set the origin point and use the framing function to verify alignment</li> <li>Recalibrate if needed, then start the cutting process</li> </ul>"},{"location":"uxd/create_test/#4-assemble-the-boxes","title":"4. Assemble the Boxes","text":"<ul> <li>Assemble the bottom, and side panels of each cube</li> <li>important: Leave one side (left or right or top) open for internal wiring</li> </ul>"},{"location":"uxd/create_test/#5-assemble-the-parts","title":"5. Assemble the Parts","text":"<ul> <li>Place the Wemos, ESP32 and their breadboard into the boxes</li> <li>Check all wire connections</li> <li>Insert the speaker into its slot</li> <li>Insert the LEDs into the Box</li> </ul>"},{"location":"uxd/create_test/#6-glue-parts","title":"6. Glue Parts","text":"<ul> <li>Use hot glue to fix sensors on the top of the sensor cube</li> <li>Use hot glue to fix the window from the inside to avoid gaps</li> <li>Use hot glue to fix LEDs for better alignment.</li> <li>Add support parts if needed (refer to example build)</li> </ul>"},{"location":"uxd/create_test/#7-close-the-boxes","title":"7. Close the Boxes","text":"<ul> <li>Add the USB-C Connections to the boards</li> <li>Close the Cubes</li> </ul>"},{"location":"uxd/create_test/#8-assemble-the-top-part-when-needed","title":"8. Assemble the top part when needed","text":"<ul> <li>When the installation is needed, slide the acrylic glass into the side slots</li> <li>Add the Vertical plate into the top box, make sure it faces the correct direction (Tilted towards the back)</li> <li>Carefully place the top MDF plate onto the cube while ensuring the acrylic stays in place</li> </ul>"},{"location":"uxd/create_test/#9-done","title":"9. Done :)","text":""},{"location":"uxd/create_test/#files","title":"Files","text":"<p>These are the relevant design files as illustrator files for references:</p> <ul> <li>2024-04-04_installation_acryl_3mm.ai</li> <li>2024-04-04_sensor-reader_mdf_4mm.ai</li> <li>2024-04-04_installation_mdf_9mm.ai</li> </ul>"},{"location":"uxd/create_test/#usertest","title":"(USER)TEST","text":""},{"location":"uxd/create_test/#requirements","title":"Requirements","text":"<p>The following requirements were choosen based on impact on design and user needs:</p>"},{"location":"uxd/create_test/#real-time-weather-visualization","title":"Real-Time Weather Visualization","text":"<p>Visuals, lighting, and sound must update within 5 seconds of weather changes.</p>"},{"location":"uxd/create_test/#intuitive-user-experience","title":"Intuitive User Experience","text":"<p>Experience must feel natural, intuitive, and technologically innovative.</p>"},{"location":"uxd/create_test/#how-was-it-tested","title":"How was it tested?","text":"<p>An observational testing method was used with a total of 5 users. The participants were invited to freely explore the system without a predefined task.</p> <p>Their behavior and reactions were observed, notes were taken during and after the testing, with question how they feel and what struggles they had during the interaction.</p> <p>No major changes were required for the physical components. Focus was placed on improving the software.</p>"},{"location":"uxd/create_test/#observations","title":"Observations","text":"<ul> <li>5 out of 5 were impressed by the visuals and described them as engaging.</li> <li>5 out of 5 were curious about how the system works.</li> <li>5 out of 5 mentioned that the visuals were hard to see in a bright environment.</li> <li>4 out of 5 noticed that the update speed from the sensor to the installation felt slow or unstable.</li> <li>4 out of 5 found the IR sensor unnecessary.</li> <li>2 out of 5 asked what variables control the installation.</li> </ul>"},{"location":"uxd/create_test/#conclusion-prioritized","title":"Conclusion (prioritized)","text":"<ol> <li>Visuals are effective \u2013 all users found the system visually engaging.</li> <li>Visibility is limited in bright environments \u2013 the experience isn't really good in bright lights.</li> <li>Blob behavior sparks curiosity \u2013 users wanted to understand how it works.</li> <li>IR sensor caused confusion \u2013 users struggled to understand and rely on it.</li> <li>Update speed could be improved \u2013 some delay was noticed during testing.</li> <li>Lack of context \u2013 users asked what controls the visuals, indicating a need for explanation.</li> </ol>"},{"location":"uxd/create_test/#optimisation","title":"Optimisation","text":"<p>To improve the experience based on user feedback, the following optimizations were implemented:</p> <ul> <li>Added a black foam frame to block external light and improve visual contrast</li> <li>Removed the IR sensor, making the system fully autonomous</li> <li>Created a printed data sheet to explain how sensor data maps to system behavior</li> <li>Improved update speed and reliability using atomic POST requests</li> </ul>"},{"location":"uxd/design/","title":"Design","text":""},{"location":"uxd/design/#design","title":"Design","text":""},{"location":"uxd/design/#brand-design","title":"Brand Design","text":"<ul> <li>FIGMA: Design files (Brand Design)</li> </ul>"},{"location":"uxd/design/#typography","title":"Typography","text":""},{"location":"uxd/design/#font-styles","title":"Font Styles","text":"<p>Three font styles have been defined for the project, all sourced from Google Fonts:</p> <ul> <li>Primary Font: Outfit</li> <li>Secondary Font: Syne</li> <li>Code Font: Fira Code</li> </ul> <p>Each font serves a specific purpose, ensuring a cohesive and structured typography system throughout the design.</p> <p> </p>"},{"location":"uxd/design/#font-scale","title":"Font Scale","text":"<p>For consistency in font scaling, the perfect fourth scale (1.333) has been applied. Font sizes have been slightly adjusted to avoid decimal pixel values, ensuring proper rendering. It's important to note that the defined heading scale serves as a general guideline rather than strict usage rules. For instance, an h1 element can adopt the heading 4 style if required by the design.</p> <p> </p>"},{"location":"uxd/design/#colors","title":"Colors","text":"<p>The color palette is designed to reinforce the futuristic, immersive, and data-driven aesthetics of Atmos. The combination of triadic colors and structured neutrals ensures a balance between holographic visuals, interactive elements, and readability while maintaining high contrast for clarity.</p>"},{"location":"uxd/design/#primary-color","title":"Primary Color","text":"<p>Aqua (#00F7FF)</p> <p>A highly vibrant cyan that serves as the core identity color, defining the holographic glow, interactive UI elements, and real-time weather effects within the installation.</p> <p></p>"},{"location":"uxd/design/#secondary-colors","title":"Secondary Colors","text":"<p>The secondary colors were determined using a triadic scheme, ensuring a dynamic and visually striking balance. These colors enhance the energy, contrast, and motion-based visuals within the project.</p> <p>School Bus Yellow (#FFD900) Hollywood Cerise (#FF00AB)</p> <p></p>"},{"location":"uxd/design/#neutral-structural-colors","title":"Neutral &amp; Structural Colors","text":"<p>Neutral colors provide structure and contrast, ensuring that UI elements remain legible while supporting a futuristic yet functional aesthetic.</p> <p>Penn Blue (#030637) A deep, near-black blue that acts as the primary dark background and text, enhancing visibility for bright, neon-lit elements.</p> <p>Azure (#E8E8E8) A soft, cool gray used for bright background surfaces and text, ensuring high readability against darker UI components.</p> <p></p>"},{"location":"uxd/design/#mesh-gradient","title":"Mesh Gradient","text":"<p>The Mesh Gradient blends the neutral colors (Penn Blue &amp; Azure) with the primary Aqua to create a smooth, futuristic background effect. This gradient adds depth, fluidity, and a holographic feel, making it ideal for backgrounds, UI elements, and ambient lighting transitions.</p> <p></p>"},{"location":"uxd/design/#heat-scale-gradient","title":"Heat Scale Gradient","text":"<p>This gradient represents temperature changes, transitioning smoothly from cold to hot.</p> <ul> <li>Deep Blue to Cyan (#070E88 \u2192 #00F7FF) \u2013 Cold temperatures.</li> <li>Cyan to Yellow (#00F7FF \u2192 #FFD900) \u2013 Neutral and warming phases.</li> <li>Yellow to Red (#FFD900 \u2192 #FF645C) \u2013 High heat intensity.</li> <li>Red to Magenta (#FF645C \u2192 #FF00AB) \u2013 Extreme heat and storm energy.</li> </ul> <p>This gradient is used for temperature-based lighting, UI elements, and visual transitions, ensuring clear and intuitive weather representation.</p> <p></p>"},{"location":"uxd/design/#physical-design","title":"Physical Design","text":""},{"location":"uxd/design/#digital-manufacturing-techniques-and-materials","title":"digital manufacturing technique(s) and material(s)","text":"<p>The manufacturing technique was selected based on the available resources at the MakersLab at HVA, ensuring feasibility. Material choices were made considering cost-effectiveness and precision to meet the project's requirements.</p>"},{"location":"uxd/design/#technique","title":"Technique","text":"<p>The design was created in Adobe Illustrator using vector-based files, which allowed precise layout for laser cutting.</p>"},{"location":"uxd/design/#material","title":"Material","text":"<p>MDF (Medium-Density Fiberboard)</p> <ul> <li> <p>9mm MDF</p> </li> <li> <p>Quantity: 1 sheet</p> </li> <li>Size: 1220 mm \u00d7 610 mm \u00d7 9 mm</li> <li>Use: Main installation cube</li> <li> <p>Reasoning: Strong, affordable, and laser-compatible</p> </li> <li> <p>4mm MDF</p> </li> <li>Quantity: 1 sheet</li> <li>Size: 500 mm \u00d7 350 mm \u00d7 4 mm</li> <li>Use: Reader cube and smaller support elements</li> <li>Reasoning: Lightweight and sufficient for smaller structural parts</li> </ul> <p>Acrylic (Plexiglas)</p> <ul> <li>3mm Acrylic</li> <li>Quantity: 1 sheet</li> <li>Size: 600 mm \u00d7 1200 mm \u00d7 3 mm</li> <li>Use: Transparent parts for Pepper's Ghost cube</li> <li>Reasoning: Provides optical clarity and rigidity</li> </ul>"},{"location":"uxd/design/#justification","title":"Justification","text":"<p>These materials are both accessible and effective for structural and aesthetic needs.</p>"},{"location":"uxd/design/#digital-design","title":"DIGITAL DESIGN","text":""},{"location":"uxd/design/#software","title":"Software","text":"<ul> <li>Illustrator: Used to create precise vector-based design files for laser cutting. This software enables accurate cut line alignment and allows for easy modifications throughout the design process.</li> </ul>"},{"location":"uxd/design/#design-proces","title":"Design Proces","text":""},{"location":"uxd/design/#1-added-sizes","title":"1. Added Sizes","text":"<p>Determined the base dimensions for the different parts such as the iPad, both device cubes, and the Pepper\u2019s Ghost cube.</p> <ul> <li>Add rectangles and the dimensions in Illustrator</li> <li>Visualize all base sizes to get a clear spatial overview</li> </ul> <p></p>"},{"location":"uxd/design/#2-added-mdf-installation-cube-cutouts","title":"2. Added MDF Installation Cube Cutouts","text":"<p>Created the bottom part of the installation cube using MakerCase.</p> <ul> <li>Create box with MakerCase</li> <li>Import the generated SVG into Illustrator</li> <li>Remove labels if not needed</li> </ul> <p></p>"},{"location":"uxd/design/#3-added-mdf-installation-top-cutouts","title":"3. Added MDF Installation Top Cutouts","text":"<p>Designed top panel with:</p> <ul> <li>Add a rectangle using the defined dimensions</li> <li>Cut a display window based on iPad size</li> <li>Add small slots for the Plexiglas joints (same height as Plexiglas thickness)</li> </ul> <p></p>"},{"location":"uxd/design/#4-added-mdf-installation-part-cutouts","title":"4. Added MDF Installation Part Cutouts","text":"<p>Extended the bottom cube with:</p> <ul> <li>Speaker cutout (shape depends on speaker, use Shape Builder if complex)</li> <li>Small circle cutout for USB power access on the back</li> <li>Added Plexiglas window cutout</li> </ul> <p></p>"},{"location":"uxd/design/#5-added-plexiglas-cube-cutouts","title":"5. Added Plexiglas Cube Cutouts","text":"<p>Outlined the Plexiglas cube and added joints using the Shape Builder tool.</p> <ul> <li>Add rectangles for each panel</li> <li>Align slot cuts from the MDF top</li> <li>Use Shape Builder to match joints</li> </ul> <p></p>"},{"location":"uxd/design/#6-added-plexiglas-diagonal-cutout","title":"6. Added Plexiglas Diagonal Cutout","text":"<p>Calculated diagonal using Pythagoras. Added the angled reflective panel for Pepper\u2019s Ghost.</p> <ul> <li>Add rectangle based on calculated diagonal height</li> <li>Width = inner width of the cube</li> </ul> <p></p>"},{"location":"uxd/design/#7-added-plexiglas-window-cutout","title":"7. Added Plexiglas Window Cutout","text":"<p>Created a viewing window in the Plexiglas for the bottom.</p> <ul> <li>Cut a slightly larger window than defined in Step 4</li> <li>Ensure it fits tightly without falling through</li> </ul> <p></p>"},{"location":"uxd/design/#8-added-mdf-reader-cube-cutouts","title":"8. Added MDF Reader Cube Cutouts","text":"<p>Created the reader cube using MakerCase.</p> <ul> <li>Generate box with MakerCase</li> <li>Import into Illustrator</li> <li>Clean up labels</li> </ul> <p></p>"},{"location":"uxd/design/#9-added-mdf-reader-part-cutouts","title":"9. Added MDF Reader Part Cutouts","text":"<p>Integrated cutouts for sensor access and power.</p> <ul> <li>Measure sensors + LEDs</li> <li>Add rectangle + circle cutouts on the top</li> <li>Position for full accessibility</li> </ul> <p></p>"},{"location":"uxd/design/#10-added-mdf-reader-support-cutouts","title":"10. Added MDF Reader Support Cutouts","text":"<p>Created small support structures for stability.</p> <ul> <li>Add two 30mm \u00d7 30mm cutouts</li> <li>These act as internal support blocks</li> </ul> <p></p>"},{"location":"uxd/design/#version-history","title":"Version History","text":"<p>This section lists the project's Design files, with each version reflecting incremental updates and refinements.</p> <p>Digital Design (Illustrator Files)</p> <ul> <li>010 - Added MDF Reader Support Cutouts</li> <li>009 - Added MDF Reader Part Cutouts</li> <li>008 - Added MDF Reader Cube Cutouts</li> <li>007 - Added Plexiglas Window Cutout</li> <li>006 - Added Plexiglas Diagonal Cutout</li> <li>005 - Added Plexiglas Cube Cutouts</li> <li>004 - Added MDF Installation Part Cutouts</li> <li>003 - Added MDF Installation Top Cutouts</li> <li>002 - Added MDF Installation Cube Cutouts</li> <li>001 - Added Sizes</li> </ul> <p>Brand Design (Figma)</p> <ul> <li>002 - add Colors &amp; Gradients</li> <li>001 - add Typography</li> </ul>"},{"location":"web/api_reference/","title":"API Reference","text":""},{"location":"web/api_reference/#api-reference","title":"API Reference","text":""},{"location":"web/api_reference/#base-url","title":"Base URL","text":"<pre><code>http://YOURDOMAIN/api\n</code></pre> <p>For this project</p> <pre><code>https://yanisdeplazes.loca.lt/api\n</code></pre>"},{"location":"web/api_reference/#endpoints","title":"Endpoints","text":""},{"location":"web/api_reference/#data-tables-overview-crud","title":"Data Tables Overview (CRUD)","text":"Table Endpoint Description Device <code>/device</code> Stores registered devices Reading <code>/reading</code> Stores sensor readings from devices Sensor <code>/sensor</code> Defines available sensors SensorData <code>/sensordata</code> Links readings with sensor values Setting <code>/setting</code> Configuration settings Views <code>/views</code> Views"},{"location":"web/api_reference/#custom-endpoints","title":"Custom Endpoints","text":"Endpoint Description <code>/reading-with-sensordata</code> atomic POST request <code>/installation/publish</code> Publisher <code>/installation/ws</code> WebSocket connection <code>/installation</code> reverse proxy"},{"location":"web/api_reference/#device","title":"Device","text":"<ul> <li><code>GET /device</code> - Get all devices</li> <li><code>GET /device/{id}</code> - Get a device by ID</li> <li><code>POST /device</code> - Create a device</li> <li><code>PUT /device/{id}</code> - Update a device</li> <li><code>DELETE /device/{id}</code> - Delete a device</li> </ul>"},{"location":"web/api_reference/#get-device","title":"<code>GET /device</code>","text":"<p>Example Response:</p> <pre><code>[\n{\n\"id\": \"1\",\n\"key\": \"station_1\",\n\"name\": \"Weather Station 1\"\n},\n{\n\"id\": \"2\",\n\"key\": \"station_2\",\n\"name\": \"Weather Station 2\"\n}\n]\n</code></pre>"},{"location":"web/api_reference/#get-deviceid","title":"<code>GET /device/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"id\": 1,\n\"key\": \"station_1\",\n\"name\": \"Weather Station 1\"\n}\n</code></pre>"},{"location":"web/api_reference/#post-device","title":"<code>POST /device</code>","text":"<p>Example Request Body (Single Insert):</p> <pre><code>{\n\"key\": \"station_3\",\n\"name\": \"Weather Station 3\"\n}\n</code></pre> <p>Example Request Body (Multiple Inserts):</p> <pre><code>[\n{ \"key\": \"station_4\", \"name\": \"Weather Station 4\" },\n{ \"key\": \"station_5\", \"name\": \"Weather Station 5\" }\n]\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Created successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#put-deviceid","title":"<code>PUT /device/{id}</code>","text":"<p>Example Request Body:</p> <pre><code>{\n\"name\": \"Updated Station\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Updated successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#delete-deviceid","title":"<code>DELETE /device/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"message\": \"Deleted successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#device_1","title":"Device","text":"<ul> <li><code>GET /reading</code> - Get all readings</li> <li><code>GET /reading/{id}</code> - Get a reading by ID</li> <li><code>POST /reading</code> - Create a reading</li> <li><code>PUT /reading/{id}</code> - Update a reading</li> <li><code>DELETE /reading/{id}</code> - Delete a reading</li> </ul>"},{"location":"web/api_reference/#get-reading","title":"<code>GET /reading</code>","text":"<p>Example Response:</p> <pre><code>[\n{\n\"id\": \"1\",\n\"device_id\": \"1\",\n\"timestamp\": \"2025-03-10 09:49:25\"\n},\n{\n\"id\": \"2\",\n\"device_id\": \"2\",\n\"timestamp\": \"2025-03-10 09:50:28\"\n}\n]\n</code></pre>"},{"location":"web/api_reference/#get-readingid","title":"<code>GET /reading/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"id\": \"1\",\n\"device_id\": \"1\",\n\"timestamp\": \"2025-03-10 09:49:25\"\n}\n</code></pre>"},{"location":"web/api_reference/#post-reading","title":"<code>POST /reading</code>","text":"<p>Example Request Body (Single Insert):</p> <pre><code>{\n\"device_id\": \"1\"\n}\n</code></pre> <p>Example Request Body (Multiple Inserts):</p> <pre><code>[{ \"device_id\": \"1\" }, { \"device_id\": \"2\" }]\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Created successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#put-readingid","title":"<code>PUT /reading/{id}</code>","text":"<p>Example Request Body:</p> <pre><code>{\n\"device_id\": \"2\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Updated successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#delete-readingid","title":"<code>DELETE /reading/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"message\": \"Deleted successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#sensor","title":"Sensor","text":"<ul> <li><code>GET /sensor</code> - Get all sensors</li> <li><code>GET /sensor/{id}</code> - Get a sensor by ID</li> <li><code>POST /sensor</code> - Create a sensor</li> <li><code>PUT /sensor/{id}</code> - Update a sensor</li> <li><code>DELETE /sensor/{id}</code> - Delete a sensor</li> </ul>"},{"location":"web/api_reference/#get-sensor","title":"<code>GET /sensor</code>","text":"<p>Example Response:</p> <pre><code>[\n{\n\"id\": \"1\",\n\"key\": \"ky_015_temperature\",\n\"name\": \"KY-015 Temperature Sensor\",\n\"unit\": \"\u00b0C\"\n},\n{\n\"id\": \"2\",\n\"key\": \"ky_015_humidity\",\n\"name\": \"KY-015 Humidity Sensor\",\n\"unit\": \"%\"\n},\n{\n\"id\": \"3\",\n\"key\": \"gl5516_ldr\",\n\"name\": \"GL5516 LDR Photoresistor\",\n\"unit\": \"lux\"\n},\n{\n\"id\": \"4\",\n\"key\": \"dc3_5v_water\",\n\"name\": \"DC3-5V Water Sensor\",\n\"unit\": \"level\"\n},\n{\n\"id\": \"5\",\n\"key\": \"bmp280_temperature\",\n\"name\": \"BMP280 Temperature Sensor\",\n\"unit\": \"\u00b0C\"\n},\n{\n\"id\": \"6\",\n\"key\": \"bmp280_pressure\",\n\"name\": \"BMP280 Pressure Sensor\",\n\"unit\": \"hPa\"\n}\n]\n</code></pre>"},{"location":"web/api_reference/#get-sensorid","title":"<code>GET /sensor/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"id\": 1,\n\"key\": \"ky_015_temperature\",\n\"name\": \"KY-015 Temperature Sensor\",\n\"unit\": \"\u00b0C\"\n}\n</code></pre>"},{"location":"web/api_reference/#post-sensor","title":"<code>POST /sensor</code>","text":"<p>Example Request Body (Single Insert):</p> <pre><code>{\n\"key\": \"ky_037_sound\",\n\"name\": \"KY-037 Microphone sound sensor (high sensitivity)\",\n\"unit\": \"dB\"\n}\n</code></pre> <p>Example Request Body (Multiple Inserts):</p> <pre><code>[\n{ \"key\": \"sensor_1\", \"name\": \"Custom Sensor 1\", \"unit\": \"\u00b0C\" },\n{ \"key\": \"sensor_2\", \"name\": \"Custom Sensor 2\", \"unit\": \"%\" }\n]\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Created successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#put-sensorid","title":"<code>PUT /sensor/{id}</code>","text":"<p>Example Request Body:</p> <pre><code>{\n\"name\": \"KY-037 Microphone sound sensor\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Updated successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#delete-sensorid","title":"<code>DELETE /sensor/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"message\": \"Deleted successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#sensordata","title":"SensorData","text":"<ul> <li><code>GET /sensordata</code> - Get all sensor data</li> <li><code>GET /sensordata/{id}</code> - Get a sensor data by ID</li> <li><code>POST /sensordata</code> - Create a sensor data</li> <li><code>PUT /sensordata/{id}</code> - Update a sensor data</li> <li><code>DELETE /sensordata/{id}</code> - Delete a sensor data</li> </ul>"},{"location":"web/api_reference/#get-sensordata","title":"<code>GET /sensordata</code>","text":"<p>Example Response:</p> <pre><code>[\n{\n\"id\": \"1\",\n\"reading_id\": \"1\",\n\"sensor_id\": \"1\",\n\"value\": \"25.20\"\n},\n{\n\"id\": \"2\",\n\"reading_id\": \"1\",\n\"sensor_id\": \"3\",\n\"value\": \"150.00\"\n},\n{\n\"id\": \"3\",\n\"reading_id\": \"1\",\n\"sensor_id\": \"2\",\n\"value\": \"40.50\"\n},\n{\n\"id\": \"4\",\n\"reading_id\": \"1\",\n\"sensor_id\": \"4\",\n\"value\": \"1.00\"\n},\n{\n\"id\": \"5\",\n\"reading_id\": \"1\",\n\"sensor_id\": \"5\",\n\"value\": \"21.70\"\n},\n{\n\"id\": \"6\",\n\"reading_id\": \"1\",\n\"sensor_id\": \"6\",\n\"value\": \"1010.80\"\n}\n]\n</code></pre>"},{"location":"web/api_reference/#get-sensordataid","title":"<code>GET /sensordata/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"id\": 1,\n\"reading_id\": 1,\n\"sensor_id\": 1,\n\"value\": \"25.20\"\n}\n</code></pre>"},{"location":"web/api_reference/#post-sensordata","title":"<code>POST /sensordata</code>","text":"<p>Example Request Body (Single Insert):</p> <pre><code>{\n\"reading_id\": 2,\n\"sensor_id\": 1,\n\"value\": \"26.20\"\n}\n</code></pre> <p>Example Request Body (Multiple Inserts):</p> <pre><code>[\n{ \"reading_id\": 2, \"sensor_id\": 1, \"value\": \"26.20\" },\n{ \"reading_id\": 2, \"sensor_id\": 2, \"value\": \"50.00\" }\n]\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Created successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#put-sensordataid","title":"<code>PUT /sensordata/{id}</code>","text":"<p>Example Request Body:</p> <pre><code>{\n\"value\": \"27.20\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Updated successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#delete-sensordataid","title":"<code>DELETE /sensordata/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"message\": \"Deleted successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#setting","title":"Setting","text":"<ul> <li><code>GET /setting</code> - Get all settings</li> <li><code>GET /setting/{id}</code> - Get a setting by ID</li> <li><code>POST /setting</code> - Create a setting</li> <li><code>PUT /setting/{id}</code> - Update a setting</li> <li><code>DELETE /setting/{id}</code> - Delete a setting</li> </ul>"},{"location":"web/api_reference/#get-setting","title":"<code>GET /setting</code>","text":"<p>Example Response:</p> <pre><code>[\n{\n\"id\": \"1\",\n\"key\": \"pressure_min\",\n\"name\": \"Minimum Atmospheric Pressure\",\n\"value\": null,\n\"default_value\": \"900.0000\"\n},\n{\n\"id\": \"2\",\n\"key\": \"pressure_max\",\n\"name\": \"Maximum Atmospheric Pressure\",\n\"value\": null,\n\"default_value\": \"1080.0000\"\n},\n{\n\"id\": \"3\",\n\"key\": \"wind_speed_min\",\n\"name\": \"Minimum Wind Speed\",\n\"value\": null,\n\"default_value\": \"0.0000\"\n},\n{\n\"id\": \"4\",\n\"key\": \"wind_speed_max\",\n\"name\": \"Maximum Wind Speed\",\n\"value\": null,\n\"default_value\": \"100.0000\"\n},\n{\n\"id\": \"5\",\n\"key\": \"temperature_min\",\n\"name\": \"Minimum Temperature\",\n\"value\": null,\n\"default_value\": \"-10.0000\"\n},\n{\n\"id\": \"6\",\n\"key\": \"temperature_max\",\n\"name\": \"Maximum Temperature\",\n\"value\": null,\n\"default_value\": \"50.0000\"\n},\n{\n\"id\": \"7\",\n\"key\": \"lux_min\",\n\"name\": \"Minimum Light Intensity (Lux)\",\n\"value\": null,\n\"default_value\": \"0.0000\"\n},\n{\n\"id\": \"8\",\n\"key\": \"lux_max\",\n\"name\": \"Maximum Light Intensity (Lux)\",\n\"value\": null,\n\"default_value\": \"1000.0000\"\n},\n{\n\"id\": \"9\",\n\"key\": \"blob_intensity_min\",\n\"name\": \"Minimum Blob Intensity\",\n\"value\": null,\n\"default_value\": \"0.0500\"\n},\n{\n\"id\": \"10\",\n\"key\": \"blob_intensity_max\",\n\"name\": \"Maximum Blob Intensity\",\n\"value\": null,\n\"default_value\": \"1.0000\"\n},\n{\n\"id\": \"11\",\n\"key\": \"blob_speed_min\",\n\"name\": \"Minimum Blob Movement Speed\",\n\"value\": null,\n\"default_value\": \"0.0100\"\n},\n{\n\"id\": \"12\",\n\"key\": \"blob_speed_max\",\n\"name\": \"Maximum Blob Movement Speed\",\n\"value\": null,\n\"default_value\": \"0.5000\"\n},\n{\n\"id\": \"13\",\n\"key\": \"background_noise_scale_min\",\n\"name\": \"Minimum Background Noise Scale\",\n\"value\": null,\n\"default_value\": \"5.0000\"\n},\n{\n\"id\": \"14\",\n\"key\": \"background_noise_scale_max\",\n\"name\": \"Maximum Background Noise Scale\",\n\"value\": null,\n\"default_value\": \"10.0000\"\n},\n{\n\"id\": \"15\",\n\"key\": \"background_height_min\",\n\"name\": \"Minimum Background Height\",\n\"value\": null,\n\"default_value\": \"0.5000\"\n},\n{\n\"id\": \"16\",\n\"key\": \"background_height_max\",\n\"name\": \"Maximum Background Height\",\n\"value\": null,\n\"default_value\": \"2.5000\"\n},\n{\n\"id\": \"17\",\n\"key\": \"background_speed_min\",\n\"name\": \"Minimum Background Movement Speed\",\n\"value\": null,\n\"default_value\": \"1.0000\"\n},\n{\n\"id\": \"18\",\n\"key\": \"background_speed_max\",\n\"name\": \"Maximum Background Movement Speed\",\n\"value\": null,\n\"default_value\": \"60.0000\"\n},\n{\n\"id\": \"19\",\n\"key\": \"background_brightness_min\",\n\"name\": \"Minimum Background Brightness\",\n\"value\": null,\n\"default_value\": \"0.1000\"\n},\n{\n\"id\": \"20\",\n\"key\": \"background_brightness_max\",\n\"name\": \"Maximum Background Brightness\",\n\"value\": null,\n\"default_value\": \"1.0000\"\n},\n{\n\"id\": \"21\",\n\"key\": \"color_temperature_threshold\",\n\"name\": \"Temperature Threshold for Color Changes\",\n\"value\": null,\n\"default_value\": \"10.0000\"\n},\n{\n\"id\": \"22\",\n\"key\": \"color_humidity_brightness_factor\",\n\"name\": \"Impact of Humidity on Color Brightness\",\n\"value\": null,\n\"default_value\": \"1.0000\"\n}\n]\n</code></pre>"},{"location":"web/api_reference/#get-settingid","title":"<code>GET /setting/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"id\": 1,\n\"key\": \"pressure_min\",\n\"name\": \"Minimum Atmospheric Pressure\",\n\"value\": null,\n\"default_value\": \"900.0000\"\n}\n</code></pre>"},{"location":"web/api_reference/#post-setting","title":"<code>POST /setting</code>","text":"<p>Example Request Body (Single Insert):</p> <pre><code>{\n\"key\": \"xyz\",\n\"name\": \"XYZ Settings\",\n\"value\": null,\n\"default_value\": \"900.0000\"\n}\n</code></pre> <p>Example Request Body (Multiple Inserts):</p> <pre><code>[\n{\n\"key\": \"setting_1\",\n\"name\": \"Setting 1\",\n\"value\": \"50\",\n\"default_value\": \"100\"\n},\n{\n\"key\": \"setting_2\",\n\"name\": \"Setting 2\",\n\"value\": \"25\",\n\"default_value\": \"80\"\n}\n]\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Created successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#put-settingid","title":"<code>PUT /setting/{id}</code>","text":"<p>Example Request Body:</p> <pre><code>{\n\"value\": 31.1\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Updated successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#delete-settingid","title":"<code>DELETE /setting/{id}</code>","text":"<p>Example Response:</p> <pre><code>{\n\"message\": \"Deleted successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#views","title":"Views","text":""},{"location":"web/api_reference/#get-viewslatestdevicereadingsdevice_idid","title":"<code>get /views/LatestDeviceReadings?device_id={id}</code>","text":"<p>This view retrieves only the most recent sensor readings for each device.</p> <p>Example Response:</p> <pre><code>[\n{\n\"device_id\": \"50\",\n\"device_name\": \"Weather Station 3\",\n\"sensor_name\": \"KY-015 Temperature Sensor\",\n\"sensor_unit\": \"\u00b0C\",\n\"value\": \"1.20\",\n\"timestamp\": \"2025-03-10 18:09:40\"\n},\n{\n\"device_id\": \"50\",\n\"device_name\": \"Weather Station 3\",\n\"sensor_name\": \"KY-015 Humidity Sensor\",\n\"sensor_unit\": \"%\",\n\"value\": \"10.50\",\n\"timestamp\": \"2025-03-10 18:09:40\"\n},\n{\n\"device_id\": 1,\n\"device_name\": \"Weather Station 1\",\n\"sensor_name\": \"KY-015 Temperature Sensor\",\n\"sensor_unit\": \"\u00b0C\",\n\"value\": \"25.20\",\n\"timestamp\": \"2025-03-10 09:49:25\"\n},\n{\n\"device_id\": 1,\n\"device_name\": \"Weather Station 1\",\n\"sensor_name\": \"GL5516 LDR Photoresistor\",\n\"sensor_unit\": \"lux\",\n\"value\": \"150.00\",\n\"timestamp\": \"2025-03-10 09:49:25\"\n}\n// ...\n]\n</code></pre>"},{"location":"web/api_reference/#custom-api-requests","title":"Custom API Requests","text":""},{"location":"web/api_reference/#post-reading-with-sensordata","title":"<code>POST /reading-with-sensordata</code>","text":"<p>Creates a reading and its associated sensor data in a single atomic POST request.</p> <p>Example Request Body:</p> <pre><code>{\n\"device_id\": 1,\n\"sensor_data\": [\n{ \"sensor_id\": 1, \"value\": 19.8 },\n{ \"sensor_id\": 2, \"value\": 10.0 },\n{ \"sensor_id\": 3, \"value\": 0.0 },\n{ \"sensor_id\": 4, \"value\": 51.0 },\n{ \"sensor_id\": 5, \"value\": 20.2 },\n{ \"sensor_id\": 6, \"value\": 1027.8 }\n]\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n\"message\": \"Created successfully\"\n}\n</code></pre>"},{"location":"web/api_reference/#post-reading-with-sensordata_1","title":"<code>POST /reading-with-sensordata</code>","text":""},{"location":"web/api_reference/#installation-websocket-publishing-endpoints","title":"Installation WebSocket &amp; Publishing Endpoints","text":"<p>These endpoints are used for real-time communication between the backend and frontend via WebSocket-over-TLS, powered by <code>ngx_http_push_stream_module</code>.</p>"},{"location":"web/api_reference/#websocket-subscriber","title":"WebSocket Subscriber","text":""},{"location":"web/api_reference/#get-installationws","title":"<code>GET /installation/ws</code>","text":"<p>Establishes a WebSocket connection and subscribes the client to the <code>installation</code> channel.</p> <ul> <li>Protocol: WebSocket (<code>wss://</code> in production)</li> <li>Expected Use Case: Frontend client connects here to receive real-time updates (e.g., active carousel index).</li> <li>Connection Type: Long-lived, bidirectional.</li> </ul>"},{"location":"web/api_reference/#publisher-endpoint","title":"Publisher Endpoint","text":""},{"location":"web/api_reference/#post-installationpublish","title":"<code>POST /installation/publish</code>","text":"<p>Publishes a new message to all subscribers of the <code>installation</code> channel.</p> <ul> <li>Body Format (Raw text):</li> </ul> <pre><code>1\n</code></pre> <ul> <li>Content-Type: <code>text/plain</code></li> <li>Authentication: Restricted (handled by server access control or internal-only publishing)</li> <li>Expected Use Case: The backend (or ESP32) sends state updates like <code>currentIndex</code> to the frontend via this channel.</li> </ul>"},{"location":"web/api_reference/#installation-reverse-proxy-endpoint","title":"Installation Reverse Proxy Endpoint","text":""},{"location":"web/api_reference/#get-installation","title":"<code>GET /installation/...</code>","text":"<p>All remaining requests starting with <code>/installation/</code> are reverse proxied to the embedded HTTPS server of the ESP32:</p> <pre><code>proxy_pass https://100.74.255.21; // Should be optimized. Maybe use Local Domains\n</code></pre> <ul> <li>Use Case: Internal API call delegation to ESP32-secured HTTPS endpoints.</li> <li>Security: Certificate verification is skipped (<code>proxy_ssl_verify off</code>),</li> </ul>"},{"location":"web/code/","title":"Web Code","text":""},{"location":"web/code/#web-code","title":"Web Code","text":""},{"location":"web/code/#frontend","title":"Frontend","text":"<p>The frontend JavaScript is implemented in full OOP to adopt a modular approach. With use of SCSS which is served with Vite with hot reload. Twig was used as a template engine even tho it is not really that necessary for this project.</p>"},{"location":"web/code/#project-structure","title":"Project Structure","text":"<p>The project follows this structure for maintainability:</p> <pre><code>/frontend\n\u2502\n\u251c\u2500\u2500 /assets                # Static assets and application logic\n\u2502   \u251c\u2500\u2500 /js               # JavaScript modules (OOP, ES6+, app logic)\n\u2502   \u251c\u2500\u2500 /shaders          # WebGL / Three.js shaders\n\u2502   \u2514\u2500\u2500 /styles           # SCSS stylesheets and design utilities\n\u2502\n\u251c\u2500\u2500 /templates             # Twig templating system\n\u2502   \u251c\u2500\u2500 /partials         # Reusable UI components (e.g. header, footer)\n\u2502   \u251c\u2500\u2500 base.twig         # Base layout used by pages\n\u2502   \u2514\u2500\u2500 index.twig        # Entry point template rendered via PHP\n\u2502\n\u251c\u2500\u2500 build-twig.php         # Builds `index.php` using Twig and Vite manifest\n\u251c\u2500\u2500 index.php              # Front controller that renders the main view (Twig entry)\n\u2502\n\u251c\u2500\u2500 .eslintrc.json         # JavaScript linting configuration (Airbnb + Prettier)\n\u251c\u2500\u2500 .htmlhintrc            # HTML validation rules\n\u251c\u2500\u2500 .stylelintrc.json      # SCSS/CSS linting rules\n\u251c\u2500\u2500 package.json           # NPM dependencies and Vite build scripts\n\u2514\u2500\u2500 vite.config.js         # Vite dev server and build configuration\n</code></pre>"},{"location":"web/code/#coding-standards","title":"Coding Standards","text":"<p>To keep the frontend code clean, readable, and maintainable, the following conventions are used:</p>"},{"location":"web/code/#javascript-eslint-prettier","title":"JavaScript (ESLint &amp; Prettier)","text":"<ul> <li>root (<code>root: true</code>): Marks this ESLint configuration as the root configuration, preventing ESLint from searching further up the directory structure.</li> <li>extends (<code>extends: [\"airbnb-base\", \"eslint:recommended\", \"prettier\"]</code>):</li> <li>Inherits rules from:<ul> <li>airbnb-base: Airbnb's JavaScript style guide (excluding React rules).</li> <li>eslint:recommended: Standard recommended rules provided by ESLint.</li> <li>prettier: Rules that ensure compatibility with Prettier formatting.</li> </ul> </li> <li>plugins (<code>plugins: [\"prettier\"]</code>): Enables integration with the Prettier formatter.</li> <li>prettier/prettier (<code>error</code>): Ensures code formatting adheres to Prettier configuration.</li> <li>camelcase (<code>error</code>): Enforces camelCase naming convention for identifiers.</li> <li>new-cap (<code>error</code>): Requires constructors to start with an uppercase letter.</li> <li>no-underscore-dangle (<code>error</code>): Disallows identifiers from starting or ending with underscores.</li> <li>prefer-const (<code>error</code>): Enforces using <code>const</code> for variables that are never reassigned.</li> <li>eqeqeq (<code>error</code>): Requires strict equality (<code>===</code>) over abstract equality (<code>==</code>).</li> <li>arrow-body-style (<code>[\"error\", \"as-needed\"]</code>): Enforces concise arrow function syntax when possible.</li> <li>object-curly-spacing (<code>[\"error\", \"always\"]</code>): Requires spaces inside curly braces.</li> <li>no-console (<code>warn</code> with exceptions for <code>warn</code> and <code>error</code>): Allows <code>console.warn</code> and <code>console.error</code>, but warns against other console methods.</li> </ul>"},{"location":"web/code/#html","title":"HTML","text":"<ul> <li>All attribute names must be in lowercase.</li> <li>Elements cannot have duplicate attributes.</li> <li>Attribute values cannot contain unsafe chars</li> <li>Doctype must be declared first.</li> <li>Invalid doctype.</li> <li>The <code>&lt;script&gt;</code> tag cannot be used in a tag.</li> <li>The id and class attribute values must meet the specified rules: \"dash\"</li> <li>The value of id attributes must be unique.</li> <li>The alt attribute of an element must be present and alt attribute of area[<code>href</code>] and input[<code>type=image</code>] must have a value.</li> <li>Do not mix tabs and spaces for indentation: \"space\"</li> <li>Special characters must be escaped.</li> <li><code>&lt;style&gt;</code> tags cannot be used.</li> <li>Tag must be paired.</li> <li>Empty tags must be self closed.</li> <li>All html element names must be in lowercase.</li> <li><code>&lt;title&gt;</code> must be present in <code>&lt;head&gt;</code> tag.</li> </ul>"},{"location":"web/code/#scss","title":"SCSS","text":"<ul> <li>Specify short or long notation for hex colors: short</li> <li>Disallow named colors.</li> <li>Limit the depth of nesting: 3</li> <li>Pattern for class selectors: <code>\"^[a-z]+([a-z0-9-]+[a-z0-9]+)?$\"</code></li> <li>selector-id-pattern: <code>\"^[a-z]+([a-z0-9-]+[a-z0-9]+)?$\"</code></li> <li>scss/at-mixin-pattern: <code>\"^[a-z]+([a-z0-9-]+[a-z0-9]+)?$\"</code></li> <li>scss/dollar-variable-pattern: <code>\"^[a-z]+([a-z0-9-]+[a-z0-9]+)?$\"</code></li> <li>Disallow extension in @import, @use, @forward, and [meta.load-css] commands.</li> <li>Always Require whitespace after the // in //-comments</li> <li>Disallow !important within declarations.</li> <li>List of disallowed units. <code>[\"pt\"]</code></li> <li>Disallow units for zero lengths.</li> <li>Disallow vendor prefixes for properties.</li> <li>Disallow vendor prefixes for values.</li> <li>Disallow selectors of lower specificity from coming after overriding selectors of higher specificity. null</li> <li>Disallow empty blocks.</li> <li>Require whitespace on the inside of comment markers.</li> <li>Disallow qualifying a selector by type. <code>[true, { \"ignore\": [\"attribute\", \"class\", \"id\"] }]</code></li> </ul>"},{"location":"web/code/#linting-formatting","title":"Linting &amp; Formatting","text":"<p>The project includes ESLint, htmlhint and stylelint for code quality.</p>"},{"location":"web/code/#run-code-linting","title":"Run Code Linting","text":"<pre><code>npm run lint\n</code></pre> <pre><code>npm run lint:html\n</code></pre> <pre><code>npm run lint:scss\n</code></pre>"},{"location":"web/code/#fix-formatting-issues","title":"Fix Formatting Issues","text":"<pre><code>npm run lint:fix\n</code></pre> <pre><code>npm run lint:scss:fix\n</code></pre>"},{"location":"web/code/#build","title":"Build","text":"<pre><code>npm run build\n</code></pre> <p>Automatically builds a new build version with vite and twig.</p>"},{"location":"web/code/#testing","title":"Testing","text":"<p>Manual UI testing was conducted in Chrome and Firefox. All HTTP responses were verified to ensure proper status codes and JSON formatting.</p>"},{"location":"web/code/#code-documentation","title":"Code Documentation","text":"<ul> <li>See the Detailed Javascript Documentation</li> </ul>"},{"location":"web/code/#repository","title":"Repository","text":"<ul> <li>Source Code: GitHub Repository</li> </ul>"},{"location":"web/code/#backend","title":"Backend","text":"<p>The backend is implemented in full OOP in order to build a RESTful API with MVC principles.</p>"},{"location":"web/code/#project-structure_1","title":"Project Structure","text":"<p>The project follows this structure for maintainability:</p> <pre><code>/api\n\u2502\u2500\u2500 /Routes\n\u2502   \u251c\u2500\u2500 Api.php            # API Router \u2013 handles incoming requests\n\u2502\u2500\u2500 /Controllers\n\u2502   \u251c\u2500\u2500 Controller.php     # Base controller \u2013 handles CRUD logic\n\u2502\u2500\u2500 /Models\n\u2502   \u251c\u2500\u2500 Model.php          # Generic database model (CRUD operations)\n\u2502   \u251c\u2500\u2500 Database.php       # Singleton DB connection\n\u2502\u2500\u2500 /Views\n\u2502   \u251c\u2500\u2500 View.php           # Handles database views\n\u2502\u2500\u2500 index.php              # API entry point\n\u2502\u2500\u2500 composer.json          # Dependencies and autoloading\n</code></pre>"},{"location":"web/code/#coding-standards_1","title":"Coding Standards","text":"<p>To keep the backend code clean, readable, and maintainable, the following conventions are used:</p> <ul> <li>PSR12 Standard: Enforces PHP coding style according to the PSR-12 Extended Coding Style standard, including:</li> <li>Proper namespace and class declarations.</li> <li>Correct method and property visibility.</li> <li>Consistent indentation and spacing.</li> <li>Control structures formatting.</li> <li>Adherence to PHPDoc standards.</li> </ul>"},{"location":"web/code/#run-code-linting_1","title":"Run Code Linting","text":"<pre><code>composer lint\n</code></pre>"},{"location":"web/code/#fix-formatting-issues_1","title":"Fix Formatting Issues","text":"<pre><code>composer fix\n</code></pre>"},{"location":"web/code/#testing_1","title":"Testing","text":"<p>All API endpoints were tested using Postman and automated Jest test cases for frontend logic.</p>"},{"location":"web/code/#deployment","title":"Deployment","text":"<p>For public PHP API is containerized via Docker, with services for PHP-FPM, Nginx, and MariaDB. For public demos, the API is tunneled using LocalTunnel.</p>"},{"location":"web/code/#code-documentation_1","title":"Code Documentation","text":"<ul> <li>See the Detailed Code Documentation</li> </ul>"},{"location":"web/code/#repository_1","title":"Repository","text":"<ul> <li>Source Code: GitHub Repository</li> </ul>"},{"location":"web/code_backend/","title":"Code: Backend \u2013 PHP API","text":""},{"location":"web/code_backend/#code-backend-php-api","title":"Code: Backend \u2013 PHP API","text":""},{"location":"web/code_backend/#disclaimer","title":"Disclaimer","text":"<p>In this part, ChatGPT was used to generate code comments such as class, method and function headers, which helped to maintain a standard and write correct code comments. It is a reflection of the code comments and structure of the code.</p>"},{"location":"web/code_backend/#api-class-apiroutesapiphp","title":"Api Class (<code>Api/Routes/Api.php</code>)","text":"<p>Main API Router Handles all incoming HTTP requests, manages CORS, parses URIs, and dispatches to controller or view handlers.</p>"},{"location":"web/code_backend/#properties","title":"Properties","text":"Name Type Visibility Description <code>requestMethod</code> <code>string</code> private The HTTP method used in the current request. <code>resource</code> <code>?string</code> private The resource name (table or view) from the URI. <code>id</code> <code>?string</code> private The optional ID parameter from the URI. <code>pathParts</code> <code>string[]</code> private Array of URI path segments."},{"location":"web/code_backend/#methods","title":"Methods","text":""},{"location":"web/code_backend/#__construct","title":"<code>__construct()</code>","text":"<p>Initializes API routing, sets headers, and extracts request parameters.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_backend/#setheaders","title":"<code>setHeaders()</code>","text":"<p>Sets the response headers.</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#handlecors","title":"<code>handleCors()</code>","text":"<p>Handles CORS headers for cross-origin requests.</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#parserequesturi","title":"<code>parseRequestUri()</code>","text":"<p>Parses the request URI to determine resource and ID.</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#run","title":"<code>run()</code>","text":"<p>Runs the API and routes the request to the appropriate handler.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_backend/#handleviewrequest","title":"<code>handleViewRequest()</code>","text":"<p>Handles API requests for database views.</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#handletablerequest","title":"<code>handleTableRequest()</code>","text":"<p>Handles API requests for database tables.</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#validateidbeforemodification","title":"<code>validateIdBeforeModification()</code>","text":"<p>Validates if ID is present before update or delete operations.</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#sendresponsedata-status-200","title":"<code>sendResponse(data, status = 200)</code>","text":"<p>Sends a JSON response with an HTTP status code.</p> <ul> <li>Visibility: Private</li> <li>Parameter: <code>data</code>: <code>array</code> Response data.</li> <li>Parameter: <code>status</code>: <code>int</code> HTTP status code.</li> </ul>"},{"location":"web/code_backend/#handlereadingwithsensordata","title":"<code>handleReadingWithSensorData()</code>","text":"<p>Handles a combined insert of reading and sensor data in one POST request. Expects JSON body with: { device_id: int, sensor_data: [ {sensor_id, value}, ... ] }</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#controller-class-apicontrollerscontrollerphp","title":"Controller Class (<code>Api/Controllers/Controller.php</code>)","text":"<p>Generic Table Controller Handles CRUD operations for any table dynamically.</p>"},{"location":"web/code_backend/#properties_1","title":"Properties","text":"Name Type Visibility Description <code>model</code> <code>Model</code> protected Model instance bound to a table."},{"location":"web/code_backend/#methods_1","title":"Methods","text":""},{"location":"web/code_backend/#__constructtable","title":"<code>__construct(table)</code>","text":"<p>Initializes the controller with a specific model.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>table</code>: <code>string</code> The name of the database table.</li> </ul>"},{"location":"web/code_backend/#getall","title":"<code>getAll()</code>","text":"<p>Returns all records as JSON.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_backend/#getbyidid","title":"<code>getById(id)</code>","text":"<p>Returns a single record by ID as JSON.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>id</code>: <code>int</code> \u2014 Record ID</li> </ul>"},{"location":"web/code_backend/#create","title":"<code>create()</code>","text":"<p>Creates a new record (supports single and bulk inserts).</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_backend/#updateid","title":"<code>update(id)</code>","text":"<p>Updates an existing record.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>id</code>: <code>int</code> The ID of the record.</li> </ul>"},{"location":"web/code_backend/#deleteid","title":"<code>delete(id)</code>","text":"<p>Deletes a record.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>id</code>: <code>int</code> The ID of the record.</li> </ul>"},{"location":"web/code_backend/#sendjsonresponsedata-status-200","title":"<code>sendJsonResponse(data, status = 200)</code>","text":"<p>Sends a JSON response with the specified status code.</p> <ul> <li>Visibility: Private</li> <li>Parameter: <code>data</code>: <code>array</code> Response data.</li> <li>Parameter: <code>status</code>: <code>int</code> HTTP status code.</li> </ul>"},{"location":"web/code_backend/#getjsonrequestbody","title":"<code>getJsonRequestBody()</code>","text":"<p>Retrieves the JSON request body as an associative array.</p> <ul> <li>Visibility: Private</li> <li>Return Type: <code>array</code> The decoded JSON body.</li> </ul>"},{"location":"web/code_backend/#readingwithsensordatacontroller-class-apicontrollersreadingwithsensordatacontrollerphp","title":"ReadingWithSensorDataController Class (<code>Api/Controllers/ReadingWithSensorDataController.php</code>)","text":"<p>Custom Controller Handles atomic insert of a reading and associated sensor data in one transaction.</p>"},{"location":"web/code_backend/#properties_2","title":"Properties","text":"Name Type Visibility Description <code>db</code> <code>mysqli</code> private Database connection instance. <code>readingModel</code> <code>Model</code> private Model for the <code>reading</code> table. <code>sensorDataModel</code> <code>Model</code> private Model for the <code>sensordata</code> table."},{"location":"web/code_backend/#methods_2","title":"Methods","text":""},{"location":"web/code_backend/#__construct_1","title":"<code>__construct()</code>","text":"<p>Initializes the controller with a specific database models.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_backend/#createwithsensordatapayload","title":"<code>createWithSensorData(payload)</code>","text":"<p>Creates a reading and inserts all associated sensor data in one transaction.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>payload</code>: <code>array</code> Input data from the client.</li> <li>Return Type: <code>array</code> API response.</li> </ul>"},{"location":"web/code_backend/#database-class-apimodelsdatabasephp","title":"Database Class (<code>Api/Models/Database.php</code>)","text":"<p>Database Singleton Manages a single MySQLi connection instance across the backend.</p>"},{"location":"web/code_backend/#properties_3","title":"Properties","text":"Name Type Visibility Description <code>instance</code> <code>?Database</code> private Singleton instance of the class. <code>connection</code> <code>mysqli</code> private Active MySQLi connection."},{"location":"web/code_backend/#methods_3","title":"Methods","text":""},{"location":"web/code_backend/#getinstance","title":"<code>getInstance()</code>","text":"<p>Retrieves the singleton instance of the Database class.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Database</code> The singleton instance.</li> </ul>"},{"location":"web/code_backend/#getconnection","title":"<code>getConnection()</code>","text":"<p>Gets the MySQLi connection instance.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>mysqli</code> The active database connection.</li> </ul>"},{"location":"web/code_backend/#initializeconnection","title":"<code>initializeConnection()</code>","text":"<p>Initializes the database connection.</p> <ul> <li>Visibility: Private</li> </ul>"},{"location":"web/code_backend/#sendjsonerrorresponseerrormessage","title":"<code>sendJsonErrorResponse(errorMessage)</code>","text":"<p>Sends a JSON error response and terminates execution.</p> <ul> <li>Visibility: Private</li> <li>Parameter: <code>errorMessage</code>: <code>string</code> The error message.</li> </ul>"},{"location":"web/code_backend/#model-class-apimodelsmodelphp","title":"Model Class (<code>Api/Models/Model.php</code>)","text":"<p>Generic Model IProvides CRUD operations for any table dynamically</p>"},{"location":"web/code_backend/#properties_4","title":"Properties","text":"Name Type Visibility Description <code>connection</code> <code>mysqli</code> protected Database connection instance <code>table</code> <code>string</code> protected Database table name"},{"location":"web/code_backend/#methods_4","title":"Methods","text":""},{"location":"web/code_backend/#__constructtable_1","title":"<code>__construct(table)</code>","text":"<p>Initializes the model with a specific database table.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>table</code>: <code>string</code> The name of the database table.</li> </ul>"},{"location":"web/code_backend/#getall_1","title":"<code>getAll()</code>","text":"<p>Retrieves all records from the table.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>array</code> Returns an associative array of all records.</li> </ul>"},{"location":"web/code_backend/#getbyidid_1","title":"<code>getById(id)</code>","text":"<p>Retrieves a single record by its ID.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>id</code>: <code>int</code> The ID of the record.</li> <li>Return Type: <code>?array</code> Returns the record as an associative array, or null if not found.</li> </ul>"},{"location":"web/code_backend/#createdata","title":"<code>create(data)</code>","text":"<p>Inserts a new record into the table.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>data</code>: <code>array</code> An associative array representing the record.</li> <li>Return Type: <code>?int</code> Returns true if the insert operation was successful.</li> </ul>"},{"location":"web/code_backend/#createbulkdataset","title":"<code>createBulk(dataSet)</code>","text":"<p>Inserts multiple records into the table efficiently.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>dataSet</code>: <code>array[]</code> Array of records to insert.</li> <li>Return Type: <code>bool</code> Returns true if the operation was successful.</li> </ul>"},{"location":"web/code_backend/#updateid-data","title":"<code>update(id, data)</code>","text":"<p>Updates an existing record in the database.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>id</code>: <code>int</code> The ID of the record to update.</li> <li>Parameter: <code>data</code>: <code>array</code> An associative array of column-value pairs to update.</li> <li>Return Type: <code>bool</code>Returns true if the update was successful.</li> </ul>"},{"location":"web/code_backend/#deleteid_1","title":"<code>delete(id)</code>","text":"<p>Deletes a record from the database.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>id</code>: <code>int</code> The ID of the record to delete.</li> <li>Return Type: <code>bool</code> Returns true if the deletion was successful.</li> </ul>"},{"location":"web/code_backend/#executequeryquery","title":"<code>executeQuery(query)</code>","text":"<p>Executes a prepared query and returns true on success.</p> <ul> <li>Visibility: Private</li> <li>Parameter: <code>query</code>: <code>string</code> The SQL query.</li> <li>Return Type: <code>array</code> The query result as an associative array.</li> </ul>"},{"location":"web/code_backend/#executequery-types-params","title":"<code>execute(query, types, params)</code>","text":"<p>Executes a prepared query and returns true on success.</p> <ul> <li>Visibility: Private</li> <li>Parameter: <code>query</code>: <code>string</code> The SQL query with placeholders.</li> <li>Parameter: <code>types</code>: <code>string</code> The types of parameters.</li> <li>Parameter: <code>params</code>: <code>array</code>The parameters to bind.</li> <li>Return Type: <code>bool</code> Returns true if successful, false otherwise.</li> </ul>"},{"location":"web/code_backend/#fetchsinglequery-types-params","title":"<code>fetchSingle(query, types, params)</code>","text":"<p>Executes a prepared query and fetches a single record.</p> <ul> <li>Visibility: Private</li> <li>Parameter: <code>query</code>: <code>string</code> The SQL query with placeholders.</li> <li>Parameter: <code>types</code>: <code>string</code> The types of parameters.</li> <li>Parameter: <code>params</code>: <code>array</code>The parameters to bind.</li> <li>Return Type: <code>?array</code> Returns the fetched record as an associative array or null.</li> </ul>"},{"location":"web/code_backend/#executeinsertorupdatequeryprefix-data-querysuffix","title":"<code>executeInsertOrUpdate(queryPrefix, data, querySuffix = \"\")</code>","text":"<p>Executes an insert or update query dynamically.</p> <ul> <li>Visibility: Private</li> <li>Parameter: <code>queryPrefix</code>: <code>string</code> The query prefix (INSERT INTO or UPDATE ... SET).</li> <li>Parameter: <code>data</code>: <code>array</code> The data to insert or update.</li> <li>Parameter: <code>querySuffix</code>: <code>string</code> Optional suffix (used for WHERE conditions in updates).</li> <li>Return Type: <code>bool</code> Returns true if the operation was successful.</li> </ul>"},{"location":"web/code_frontend/","title":"Code: Frontend","text":""},{"location":"web/code_frontend/#code-frontend","title":"Code: Frontend","text":""},{"location":"web/code_frontend/#disclaimer","title":"Disclaimer","text":"<p>In this part, ChatGPT was used to generate code comments such as class, method and function headers, which helped to maintain a standard and write correct code comments. It is a reflection of the code comments and structure of the code.</p>"},{"location":"web/code_frontend/#app-class-mainjs","title":"App Class (<code>main.js</code>)","text":"<p>Main entry point for the application. Initializes the background animation, IoT devices, and UI components. Uses the ElementRegistry for efficient UI management.</p>"},{"location":"web/code_frontend/#properties","title":"Properties","text":"Name Type Visibility Description <code>backgroundScene</code> <code>BackgroundScene</code> private The background scene instance.method <code>devices</code> <code>Device[]</code> private An array storing all IoT devices."},{"location":"web/code_frontend/#methods","title":"Methods","text":""},{"location":"web/code_frontend/#constructor","title":"<code>constructor()</code>","text":"<p>Initializes the application by registering UI elements and setting up core components.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#init","title":"<code>init()</code>","text":"<p>Main initialization method.</p> <ul> <li>Initializes the Three.js background</li> <li>Loads IoT devices asynchronously</li> <li> <p>Initializes UI components</p> </li> <li> <p>Visibility: Public</p> </li> <li>Return Type: <code>Promise&lt;void&gt;</code></li> </ul>"},{"location":"web/code_frontend/#initbackground","title":"<code>initBackground()</code>","text":"<p>Initializes the Three.js animated background.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initdevices","title":"<code>initDevices()</code>","text":"<p>Fetches and initializes all available IoT devices.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;void&gt;</code></li> </ul>"},{"location":"web/code_frontend/#registeruielements","title":"<code>registerUIElements()</code>","text":"<p>Registers key UI elements into the <code>ElementRegistry</code> for efficient DOM access and management.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initui","title":"<code>initUI()</code>","text":"<p>Initializes UI components such as:</p> <ul> <li><code>Loader</code> \u2192 Handles app startup animation</li> <li><code>Select</code> \u2192 Manages the selection menu</li> <li> <p><code>Carousel</code> \u2192 Enables navigation through devices</p> </li> <li> <p>Visibility: Public</p> </li> </ul>"},{"location":"web/code_frontend/#apiclient-helpers-class-helpersapiclientjs","title":"ApiClient Helpers Class (<code>helpers/ApiClient.js</code>)","text":"<p>Handles communication with the backend API to fetch and update data dynamically. Provides methods for retrieving sensor readings, device lists, and application settings.</p>"},{"location":"web/code_frontend/#properties_1","title":"Properties","text":"Name Type Visibility Description <code>API_BASE_URL</code> <code>string</code> public Base URL for API requests, dynamically set based on the current hostname."},{"location":"web/code_frontend/#methods_1","title":"Methods","text":""},{"location":"web/code_frontend/#fetchcurrentindex","title":"<code>fetchCurrentIndex()</code>","text":"<p>Retrieves the current index from the installation endpoint. (ESP32)</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;object[] | null&gt;</code></li> </ul>"},{"location":"web/code_frontend/#fetchlatestdevicereadingsdeviceid","title":"<code>fetchLatestDeviceReadings(deviceId)</code>","text":"<p>Fetches the latest sensor data for a specific device.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>deviceId</code>: <code>string</code> The unique identifier of the device.</li> <li>Return Type: <code>Promise&lt;object[] | null&gt;</code></li> </ul>"},{"location":"web/code_frontend/#fetchdevices","title":"<code>fetchDevices()</code>","text":"<p>Fetches the list of available devices.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;object[]&gt;</code></li> </ul>"},{"location":"web/code_frontend/#updatesettingid-value","title":"<code>updateSetting(id, value)</code>","text":"<p>Updates a specific setting in the database.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>id</code>: <code>string</code> The unique identifier of the setting.</li> <li>Parameter: <code>value</code>: <code>number|string</code> The new value for the setting.</li> <li>Return Type: <code>Promise&lt;boolean&gt;</code></li> </ul>"},{"location":"web/code_frontend/#getsettings","title":"<code>getSettings()</code>","text":"<p>Retrieves application settings from the database.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;object&gt;</code></li> </ul>"},{"location":"web/code_frontend/#websocketclient-helpers-class-helperswebsocketclientjs","title":"WebSocketClient Helpers Class (<code>helpers/WebSocketClient.js</code>)","text":"<p>Handles real-time communication with the backend using WebSocket-over-TLS. Synchronizes the active device index across connected clients and updates the frontend carousel in real-time.</p>"},{"location":"web/code_frontend/#properties_2","title":"Properties","text":"Name Type Visibility Description <code>socket</code> <code>WebSocket \\| null</code> static Holds the active WebSocket connection instance or <code>null</code> if not connected. <code>carousel</code> <code>Carousel \\| null</code> static Reference to the carousel instance used for updating the UI. <code>URL</code> <code>string</code> static WebSocket endpoint dynamically built from the current hostname and protocol."},{"location":"web/code_frontend/#methods_2","title":"Methods","text":""},{"location":"web/code_frontend/#setupcarousel","title":"<code>setup(carousel)</code>","text":"<p>Registers a <code>Carousel</code> instance to be controlled by the WebSocket client.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>carousel</code>: <code>Carousel</code> \u2014 The carousel instance to register.</li> </ul>"},{"location":"web/code_frontend/#connect","title":"<code>connect()</code>","text":"<p>Establishes a secure WebSocket connection to the backend, listens for index updates, and synchronizes the UI.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;void&gt;</code></li> </ul>"},{"location":"web/code_frontend/#disconnect","title":"<code>disconnect()</code>","text":"<p>Closes the existing WebSocket connection if active and cleans up resources.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#elementregistry-helpers-class-helperselementregistryjs","title":"ElementRegistry Helpers Class (<code>helpers/ElementRegistry.js</code>)","text":"<p>Manages global references to UI elements. Provides an efficient way to register, retrieve, and manipulate DOM elements without repeated queries.</p>"},{"location":"web/code_frontend/#properties_3","title":"Properties","text":"Name Type Visibility Description <code>elements</code> <code>Map&lt;string, HTMLElement&gt;</code> public A Map storing registered elements by key."},{"location":"web/code_frontend/#methods_3","title":"Methods","text":""},{"location":"web/code_frontend/#registerkey-element","title":"<code>register(key, element)</code>","text":"<p>Registers an HTML element for easy access.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>key</code>: <code>string</code> Unique identifier for the element.</li> <li>Parameter: <code>element</code>: <code>HTMLElement</code> The DOM element to register.</li> </ul>"},{"location":"web/code_frontend/#getkey","title":"<code>get(key)</code>","text":"<p>Retrieves a previously registered element.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>key</code>: <code>string</code> The identifier of the registered element.</li> <li>Return Type: <code>HTMLElement|null</code></li> </ul>"},{"location":"web/code_frontend/#getkey_1","title":"<code>get(key)</code>","text":"<p>Retrieves a previously registered element.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>key</code>: <code>string</code> The identifier of the registered element.</li> <li>Return Type: <code>HTMLElement|null</code></li> </ul>"},{"location":"web/code_frontend/#settings-helpers-class-helperssettingsjs","title":"Settings Helpers Class (<code>helpers/Settings.js</code>)","text":"<p>Manages application settings by dynamically fetching and updating configuration values from the API. Converts setting keys from snake_case to camelCase for easier access in JavaScript. Also dynamically updates the settings UI and allows saving changes back to the database.</p>"},{"location":"web/code_frontend/#properties_4","title":"Properties","text":"Name Type Visibility Description <code>settings</code> <code>Record&lt;string, Setting&gt;</code> public Stores dynamically loaded settings from the API. Keys are formatted in camelCase for easier access."},{"location":"web/code_frontend/#methods_4","title":"Methods","text":""},{"location":"web/code_frontend/#loadsettings","title":"<code>loadSettings()</code>","text":"<p>Fetches settings from the API and dynamically stores them. Updates the settings UI with input fields allowing user modifications.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;void&gt;</code></li> </ul>"},{"location":"web/code_frontend/#submitsettings","title":"<code>submitSettings()</code>","text":"<p>Sends updated settings to the API to be stored in the database.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;void&gt;</code></li> </ul>"},{"location":"web/code_frontend/#getkey_2","title":"<code>get(key)</code>","text":"<p>Retrieves a setting value from the loaded settings.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>key</code>: <code>string</code> The setting key in camelCase format.</li> <li>Return Type: <code>number|null</code></li> </ul>"},{"location":"web/code_frontend/#utils-helpers-class-helpersutilsjs","title":"Utils Helpers Class (<code>helpers/Utils.js</code>)","text":"<p>Utility class providing helper functions for value clamping, color interpolation based on temperature, humidity-based adjustments, and DOM element visibility manipulation.</p>"},{"location":"web/code_frontend/#methods_5","title":"Methods","text":""},{"location":"web/code_frontend/#clampvalue-min-max","title":"<code>clamp(value, min, max)</code>","text":"<p>Clamps a value within a specified range.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>value</code>: <code>number</code> The value to be clamped.</li> <li>Parameter: <code>min</code>: <code>number</code> The minimum allowed value.</li> <li>Parameter: <code>max</code>: <code>number</code> The maximum allowed value.</li> <li>Return Type: <code>number</code></li> </ul>"},{"location":"web/code_frontend/#getprimarycolorrtemperature","title":"<code>getPrimaryColorr(temperature)</code>","text":"<p>Determines the primary color based on temperature using smooth interpolation.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>temperature</code>: <code>number</code> The temperature value.</li> <li>Return Type: <code>string</code></li> </ul>"},{"location":"web/code_frontend/#interpolatecolorvalue-stops","title":"<code>interpolateColor(value, stops)</code>","text":"<p>Interpolates between color stops based on a given value.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>temperature</code>: <code>number</code> The input value (e.g., temperature).</li> <li>Parameter: <code>temperature</code>: <code>ColorStop[]</code> Array of color stops with temperature and RGB values.</li> <li>Return Type: <code>string</code></li> </ul>"},{"location":"web/code_frontend/#getsecondarycolortemperature-humidity","title":"<code>getSecondaryColor(temperature, humidity)</code>","text":"<p>Computes a secondary color based on temperature and humidity. The brightness is adjusted by blending humidity influence into the primary color.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>temperature</code>: <code>number</code> The temperature value.</li> <li>Parameter: <code>humidity</code>: <code>number</code> Humidity percentage (0-100).</li> <li>Return Type: <code>string</code></li> </ul>"},{"location":"web/code_frontend/#hideelement","title":"<code>hide(element)</code>","text":"<p>Hides a given DOM element by adding a \"hidden\" CSS class.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>element</code>: <code>HTMLElement</code> The DOM element to hide.</li> </ul>"},{"location":"web/code_frontend/#showelement","title":"<code>show(element)</code>","text":"<p>Shows a given DOM element by removing the \"hidden\" CSS class.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>element</code>: <code>HTMLElement</code> The DOM element to show.</li> </ul>"},{"location":"web/code_frontend/#toggleelement","title":"<code>toggle(element)</code>","text":"<p>Toggles the visibility of a registered element.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>element</code>: <code>HTMLElement</code> The DOM element to toggle.</li> </ul>"},{"location":"web/code_frontend/#getrandomvaluemin-max","title":"<code>getRandomValue(min, max)</code>","text":"<p>Generates a random value within the given range.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>min</code>: <code>number</code> The minimum value.</li> <li>Parameter: <code>max</code>: <code>number</code> The maximum value.</li> <li>Return Type: <code>number</code></li> </ul>"},{"location":"web/code_frontend/#backgroundscene-class-componentsbackgroundscenejs","title":"BackgroundScene Class (<code>components/BackgroundScene.js</code>)","text":"<p>Singleton class representing an animated Three.js background.Dynamically adjusts based on environmental sensor data such as wind speed, pressure, temperature, humidity, and brightness.</p>"},{"location":"web/code_frontend/#properties_5","title":"Properties","text":"Name Type Visibility Description <code>container</code> <code>HTMLElement</code> <code>public</code> The HTML container element where the scene is rendered. <code>scene</code> <code>THREE.Scene</code> <code>public</code> The Three.js scene. <code>camera</code> <code>THREE.PerspectiveCamera</code> <code>public</code> The Three.js camera. <code>renderer</code> <code>THREE.WebGLRenderer</code> <code>public</code> The WebGL renderer for the scene. <code>plane</code> <code>THREE.Mesh</code> <code>public</code> The animated background mesh. <code>uniforms</code> <code>object</code> <code>public</code> Shader uniforms controlling animation behavior. <code>targetHeight</code> <code>number</code> <code>public</code> Target Height for smooth transitions. <code>targetNoiseScale</code> <code>number</code> <code>public</code> Target Noise Scale for smooth transitions. <code>targetSpeed</code> <code>number</code> <code>public</code> Target Speed for smooth transitions. <code>targetColor1</code> <code>number</code> <code>public</code> Target Primary Color for smooth transitions. <code>targetColor2</code> <code>number</code> <code>public</code> Target Secondary Color High for smooth transitions. <code>targetBrightness</code> <code>number</code> <code>public</code> Target Brightness for smooth transitions. <code>lerpSpeed</code> <code>number</code> <code>public</code> Controls the smoothness of transitions."},{"location":"web/code_frontend/#methods_6","title":"Methods","text":""},{"location":"web/code_frontend/#constructorcontainerid","title":"<code>constructor(containerId)</code>","text":"<p>Creates or returns the existing BackgroundScene instance.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>containerId</code>: <code>string</code> The ID of the HTML container where the scene will be rendered.</li> </ul>"},{"location":"web/code_frontend/#initscene","title":"<code>initScene()</code>","text":"<p>Initializes the Three.js scene.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initcamera","title":"<code>initCamera()</code>","text":"<p>Initializes the camera with a fixed perspective view.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initrenderer","title":"<code>initRenderer()</code>","text":"<p>Initializes the WebGL renderer.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initbackground_1","title":"<code>initBackground()</code>","text":"<p>Creates and adds the animated background plane.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#resize","title":"<code>resize()</code>","text":"<p>Handles resizing to maintain correct aspect ratio.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#animate","title":"<code>animate()</code>","text":"<p>Animation Loop</p> <ul> <li>Updates shader time</li> <li>Smoothly transitions between target values</li> <li> <p>Renders the scene on each frame</p> </li> <li> <p>Visibility: Public</p> </li> </ul>"},{"location":"web/code_frontend/#updateappearancepressure-temperature-humidity-light","title":"<code>updateAppearance(pressure, temperature, humidity, light)</code>","text":"<p>Updates the Background Appearance based on real-time sensor data.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>pressure</code>: <code>number</code> Atmospheric pressure in hPa.</li> <li>Parameter: <code>temperature</code>: <code>number</code> Temperature in \u00b0C.</li> <li>Parameter: <code>humidity</code>: <code>number</code> Relative humidity in %.</li> <li>Parameter: <code>light</code>: <code>number</code> Ambient light in lux.</li> </ul>"},{"location":"web/code_frontend/#setnoisescalepressure","title":"<code>setNoiseScale(pressure)</code>","text":"<p>Updates the background noise scale based on atmospheric pressure. Lower pressure results in more turbulent, higher noise scale.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>pressure</code>: <code>number</code> Atmospheric pressure in hPa.</li> </ul>"},{"location":"web/code_frontend/#setheightpressure","title":"<code>setHeight(pressure)</code>","text":"<p>Adjusts the background vertical height based on atmospheric pressure. Lower pressure raises the background to simulate uplift.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>pressure</code>: <code>number</code> Atmospheric pressure in hPa.</li> </ul>"},{"location":"web/code_frontend/#setspeedpressure","title":"<code>setSpeed(pressure)</code>","text":"<p>Adjusts background animation speed based on atmospheric pressure. Lower pressure increases animation speed to simulate stronger winds.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>windSpeed</code>: <code>number</code> Atmospheric pressure in hPa.</li> </ul>"},{"location":"web/code_frontend/#setcolor1temperature","title":"<code>setColor1(temperature)</code>","text":"<p>Updates the cooler base color of the background based on temperature.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>temperature</code>: <code>number</code> Temperature in \u00b0C.</li> </ul>"},{"location":"web/code_frontend/#setcolor2temperature-humidity","title":"<code>setColor2(temperature, humidity)</code>","text":"<p>Updates the warmer highlight color of the background using temperature and humidity.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>temperature</code>: <code>number</code> Temperature in \u00b0C.</li> <li>Parameter: <code>humidity</code>: <code>number</code> Relative humidity in %.</li> </ul>"},{"location":"web/code_frontend/#setbrightnesslux","title":"<code>setBrightness(lux)</code>","text":"<p>Adjusts scene brightness based on ambient light in lux. Lux is mapped to a normalized brightness range..</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>lux</code>: <code>number</code> Ambient light level in lux.</li> </ul>"},{"location":"web/code_frontend/#getinstancecontainerid-backgroundcontainer","title":"<code>getInstance(containerId = \"backgroundContainer\")</code>","text":"<p>Static method to get the singleton instance.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>containerId</code>: <code>string</code> The container ID (only needed for first initialization).</li> <li>Return Type: <code>BackgroundScene</code></li> </ul>"},{"location":"web/code_frontend/#blobscene-class-componentsblobscenejs","title":"BlobScene Class (<code>components/BlobScene.js</code>)","text":"<p>Represents a 3D animated Blob using Three.js. The blob dynamically changes intensity, speed, and colors based on real-time sensor data.</p>"},{"location":"web/code_frontend/#properties_6","title":"Properties","text":"Name Type Visibility Description <code>container</code> <code>HTMLElement</code> <code>public</code> The container element where the Three.js scene is rendered. <code>scene</code> <code>THREE.Scene</code> <code>public</code> The Three.js scene. <code>camera</code> <code>THREE.PerspectiveCamera</code> <code>public</code> The Three.js camera. <code>renderer</code> <code>THREE.WebGLRenderer</code> <code>public</code> The WebGL renderer for the scene. <code>controls</code> <code>OrbitControls</code> <code>public</code> The orbit controls for camera interaction. <code>blob</code> <code>THREE.Mesh</code> <code>public</code> The animated blob mesh. <code>uniforms</code> <code>object</code> <code>public</code> Shader uniforms controlling animation behavior. <code>targetIntensity</code> <code>number</code> <code>public</code> Target intensity for smooth transitions. <code>targetSpeed</code> <code>number</code> <code>public</code> Target speed for smooth transitions. <code>targetColor1</code> <code>number</code> <code>public</code> Target primary color for smooth transitions. <code>targetColor2</code> <code>number</code> <code>public</code> Target secondary color for smooth transitions. <code>lerpSpeed</code> <code>number</code> <code>public</code> Controls the smoothness of transitions."},{"location":"web/code_frontend/#methods_7","title":"Methods","text":""},{"location":"web/code_frontend/#constructorcontainerid_1","title":"<code>constructor(containerId)</code>","text":"<p>Creates a new BlobScene instance.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>containerId</code>: <code>string</code> The ID of the HTML container where the scene will be rendered.</li> </ul>"},{"location":"web/code_frontend/#initscene_1","title":"<code>initScene()</code>","text":"<p>Initializes the Three.js Scene.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initcamera_1","title":"<code>initCamera()</code>","text":"<p>Initializes the Camera with a fixed 1:1 aspect ratio.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initrenderer_1","title":"<code>initRenderer()</code>","text":"<p>Initializes the WebGL Renderer.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initcontrols","title":"<code>initControls()</code>","text":"<p>Initializes Orbit Controls for user interaction.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#initblob","title":"<code>initBlob()</code>","text":"<p>Creates and adds the animated blob mesh to the scene.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#resize_1","title":"<code>resize()</code>","text":"<p>Handles resizing to maintain a 1:1 aspect ratio.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#animate_1","title":"<code>animate()</code>","text":"<p>Animation Loop</p> <ul> <li>Updates shader time</li> <li>Smoothly transitions between target values</li> <li> <p>Renders the scene on each frame</p> </li> <li> <p>Visibility: Public</p> </li> </ul>"},{"location":"web/code_frontend/#updateappearancepressure-temperature-humidity","title":"<code>updateAppearance(pressure, temperature, humidity)</code>","text":"<p>Updates the Blob Appearance based on real-time sensor data.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>pressure</code>: <code>number</code> Current atmospheric pressure (hPa).</li> <li>Parameter: <code>temperature</code>: <code>number</code> Current temperature (\u00b0C).</li> <li>Parameter: <code>humidity</code>: <code>number</code> Current relative humidity (%).</li> </ul>"},{"location":"web/code_frontend/#setintensitypressure","title":"<code>setIntensity(pressure)</code>","text":"<p>Adjusts blob intensity based on atmospheric pressure. Lower pressure \u2192 higher intensity (chaotic visuals), Higher pressure \u2192 lower intensity (calm visuals).</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>pressure</code>: <code>number</code> Atmospheric pressure in hPa.</li> </ul>"},{"location":"web/code_frontend/#setspeedpressure_1","title":"<code>setSpeed(pressure)</code>","text":"<p>Adjusts blob animation speed based on atmospheric pressure. Lower pressure \u2192 faster motion (energetic), Higher pressure \u2192 slower motion (calmer).</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>pressure</code>: <code>number</code> Atmospheric pressure in hPa.</li> </ul>"},{"location":"web/code_frontend/#setcolor1temperature_1","title":"<code>setColor1(temperature)</code>","text":"<p>Updates the primary blob color based on temperature. Warmer or cooler tones reflect the temperature visually.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>temperature</code>: <code>number</code> Temperature in \u00b0C.</li> </ul>"},{"location":"web/code_frontend/#setcolor2temperature-humidity_1","title":"<code>setColor2(temperature, humidity)</code>","text":"<p>Updates the secondary blob color based on both temperature and humidity. Adds complexity to the color blending based on conditions.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>temperature</code>: <code>number</code> Temperature in \u00b0C.</li> <li>Parameter: <code>humidity</code>: <code>number</code> Relative humidity in %.</li> </ul>"},{"location":"web/code_frontend/#carousel-class-componentscarouseljs","title":"Carousel Class (<code>components/Carousel.js</code>)","text":"<p>Manages a dynamically interactive image carousel with navigation dots. Enables users to cycle through carousel items and updates the active device for sensor data visualization.</p>"},{"location":"web/code_frontend/#properties_7","title":"Properties","text":"Name Type Visibility Description <code>carousel</code> <code>HTMLElement/null</code> <code>private</code> The carousel container element. <code>dotsContainer</code> <code>HTMLElement/null</code> <code>private</code> The container holding navigation dots. <code>carouselItems</code> <code>HTMLElement[]</code> <code>private</code> An array of all carousel items. <code>dots</code> <code>HTMLElement[]</code> <code>private</code> An array of all navigation dots. <code>activeIndex</code> <code>number</code> <code>private</code> The index of the currently active carousel item."},{"location":"web/code_frontend/#methods_8","title":"Methods","text":""},{"location":"web/code_frontend/#constructorcarouselselector-dotscontainerselector","title":"<code>constructor(carouselSelector, dotsContainerSelector)</code>","text":"<p>Creates a new Carousel instance.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>carouselSelector</code>: <code>string</code> CSS selector for the carousel container.</li> <li>Parameter: <code>dotsContainerSelector</code>: <code>string</code> CSS selector for the navigation dots container.</li> </ul>"},{"location":"web/code_frontend/#init_1","title":"<code>init()</code>","text":"<p>Initializes the carousel by setting up event listeners and updating UI.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#createdotslist","title":"<code>createDotsList()</code>","text":"<p>Generates the navigation dots dynamically based on the number of carousel items.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#updatecarousel","title":"<code>updateCarousel()</code>","text":"<p>Updates the carousel to reflect the currently active item. Adjusts positioning and triggers UI transitions.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#updatedots","title":"<code>updateDots()</code>","text":"<p>Updates the navigation dots to indicate the currently active carousel item.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#shiftleft","title":"<code>shiftLeft()</code>","text":"<p>Moves the carousel to the previous item.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#shiftright","title":"<code>shiftRight()</code>","text":"<p>Moves the carousel to the next item.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#addeventlisteners","title":"<code>addEventListeners()</code>","text":"<p>Animation Loop</p> <p>Adds event listeners for user interactions with the carousel and navigation dots.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#device-class-componentsdevicejs","title":"Device Class (<code>components/Device.js</code>)","text":"<p>Represents an IoT device, handling sensor data retrieval, UI updates, and real-time visualizations through blob animations.</p>"},{"location":"web/code_frontend/#properties_8","title":"Properties","text":"Name Type Visibility Description <code>id</code> <code>string</code> <code>private</code> The unique identifier of the device. <code>key</code> <code>string</code> <code>private</code> The device key used for identifying the IoT station. <code>name</code> <code>string</code> <code>private</code> The name of the device. <code>sensorData</code> <code>object[]</code> <code>private</code> Stores the latest sensor data. <code>isActive</code> <code>boolean</code> <code>private</code> Tracks whether the device is currently active in the carousel. <code>updateInterval</code> <code>number/null</code> <code>private</code> Interval ID for periodic sensor updates. <code>backgroundScene</code> <code>BackgroundScene</code> <code>private</code> Instance of the background scene. <code>blobCanvasId</code> <code>string</code> <code>private</code> The ID of the canvas element for blob animations. <code>carouselItem</code> <code>HTMLElement/null</code> <code>private</code> The carousel item representing the device. <code>blobScene</code> <code>BlobScene</code> <code>private</code> Instance of the blob scene visualization."},{"location":"web/code_frontend/#methods_9","title":"Methods","text":""},{"location":"web/code_frontend/#constructor-id-key-name","title":"<code>constructor({ id, key, name })</code>","text":"<p>Creates a new IoT Device instance.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>config</code>: <code>object</code> Device configuration.</li> <li>Parameter: <code>config.id</code>: <code>string</code> Unique device identifier.</li> <li>Parameter: <code>config.key</code>: <code>string</code> Device key (e.g., \"station_1\").</li> <li>Parameter: <code>config.name</code>: <code>string</code> Device name (e.g., \"Weather Station 1\").</li> </ul>"},{"location":"web/code_frontend/#updatesensordata","title":"<code>updateSensorData()</code>","text":"<p>Fetches and updates the device's sensor data. Updates both the blob animation and UI elements if the device is active.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;void&gt;</code></li> </ul>"},{"location":"web/code_frontend/#getsensorvaluesensortype","title":"<code>getSensorValue(sensorType)</code>","text":"<p>Extracts a specific sensor value from the sensor data array.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>sensorType</code>: <code>string</code> The sensor type to retrieve.</li> <li>Return Type: <code>number|undefined</code></li> </ul>"},{"location":"web/code_frontend/#createcarouselitem","title":"<code>createCarouselItem()</code>","text":"<p>Creates a carousel item representing the device..</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>HTMLElement|null</code></li> </ul>"},{"location":"web/code_frontend/#attacheventlisteners","title":"<code>attachEventListeners()</code>","text":"<p>Attaches event listeners to handle device activation within the carousel.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#generatemeasurementlist","title":"<code>generateMeasurementList()</code>","text":"<p>Generates the sensor measurement list for UI updates.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>string</code></li> </ul>"},{"location":"web/code_frontend/#refreshui","title":"<code>refreshUI()</code>","text":"<p>Updates the UI with the latest sensor data.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#startupdating","title":"<code>startUpdating()</code>","text":"<p>Starts fetching sensor data at regular intervals.</p> <ul> <li>Visibility: Public</li> <li>Return Type: <code>Promise&lt;void&gt;</code></li> </ul>"},{"location":"web/code_frontend/#stopupdating","title":"<code>stopUpdating()</code>","text":"<p>Stops the periodic fetching of sensor data.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#loader-class-componentsloaderjs","title":"Loader Class (<code>components/Loader.js</code>)","text":"<p>Manages the application's loading animation and prepares the environment Uses a dynamic blob animation during the loading phase and transitions into the main UI after a specified duration.</p>"},{"location":"web/code_frontend/#properties_9","title":"Properties","text":"Name Type Visibility Description <code>loader</code> <code>HTMLElement/null</code> <code>private</code> The loader element. <code>blobScene</code> <code>HTMLElement/null</code> <code>private</code> Instance of the BlobScene, responsible for animated visuals. <code>backgroundScene</code> <code>BackgroundScene</code> <code>private</code> Background scene instance. <code>updateInterval</code> <code>number/null</code> <code>private</code> Interval ID for periodic updates to the blob animation. <code>displayDuration</code> <code>number</code> <code>private</code> Duration (in milliseconds) before transitioning to the main UI. <code>updateFrequency</code> <code>number</code> <code>private</code> Frequency (in milliseconds) of blob updates. <code>callback</code> <code>Function</code> <code>private</code> Callback function executed after loading is complete."},{"location":"web/code_frontend/#methods_10","title":"Methods","text":""},{"location":"web/code_frontend/#constructorcallback","title":"<code>constructor(callback)</code>","text":"<p>Creates a new Loader instance.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>callback</code>: <code>Function</code> Function to execute after loading completes..</li> </ul>"},{"location":"web/code_frontend/#init_2","title":"<code>init()</code>","text":"<p>Initializes the loader by creating the UI, starting the animation, and scheduling the transition to the main UI.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#createhtml","title":"<code>createHTML()</code>","text":"<p>Creates the loading screen UI elements. Adds a blob animation and heading text.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#startupdatingblob","title":"<code>startUpdatingBlob()</code>","text":"<p>Starts periodically updating the blob's appearance based on simulated environment data.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#updateblobappearance","title":"<code>updateBlobAppearance()</code>","text":"<p>Updates the blob and background animation using randomly generated values that mimic environmental conditions.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#cleanup","title":"<code>cleanup()</code>","text":"<p>Cleans up the loading animation by stopping updates and hiding the loader UI.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#stopupdatingblob","title":"<code>stopUpdatingBlob()</code>","text":"<p>Stops the periodic updates to the blob animation.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#stopupdatingblob_1","title":"<code>stopUpdatingBlob()</code>","text":"<p>Stops the periodic updates to the blob animation.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#select-class-componentsselectjs","title":"Select Class (<code>components/Select.js</code>)","text":"<p>Manages the application's loading animation and prepares the environment Uses a dynamic blob animation during the loading phase and transitions into the main UI after a specified duration.</p>"},{"location":"web/code_frontend/#properties_10","title":"Properties","text":"Name Type Visibility Description <code>select</code> <code>HTMLElement/null</code> <code>private</code> The selection menu element."},{"location":"web/code_frontend/#methods_11","title":"Methods","text":""},{"location":"web/code_frontend/#constructor_1","title":"<code>constructor()</code>","text":"<p>Initializes the selection menu and retrieves necessary UI elements. If the select element is not found, logs an error.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#init_3","title":"<code>init()</code>","text":"<p>Dynamically creates the selection menu with available options. Clears existing elements and appends new menu items.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#createhtml_1","title":"<code>createHTML()</code>","text":"<p>Handles the user selection and updates the UI accordingly.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#handleselectionoption","title":"<code>handleSelection(option)</code>","text":"<p>Starts periodically updating the blob's appearance based on simulated environment data.</p> <ul> <li>Visibility: Public</li> <li>Parameter: <code>option</code>: <code>string</code> The selected menu option.</li> </ul>"},{"location":"web/code_frontend/#showinstallation","title":"<code>showInstallation()</code>","text":"<p>Displays the installation view, updates UI elements, and triggers device updates. Hides the background and applies the \"installation\" class to the carousel.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/code_frontend/#showoverview","title":"<code>showOverview()</code>","text":"<p>Displays the overview view and ensures all relevant UI elements are visible.</p> <ul> <li>Visibility: Public</li> </ul>"},{"location":"web/database/","title":"Database","text":""},{"location":"web/database/#database","title":"Database","text":""},{"location":"web/database/#introduction","title":"Introduction","text":"<p>The database is designed to store the sensor data from the embedded devices efficiently. With focus on scalability and integrity, making it modular.</p>"},{"location":"web/database/#technology","title":"Technology","text":"<ul> <li>MariaDB as the relational database.</li> <li>phpMyAdmin for database management.</li> <li>Draw.io for ERD diagram concept.</li> <li>MySQL Workbench for designing the database schema.</li> </ul> <p>All communication with the database is handled through the API.</p>"},{"location":"web/database/#considerations","title":"Considerations","text":"<p>The technologies were chosen based on the recommendations of the IOT's teachers. While NoSQL was considered, SQL proved to be more efficient for the project's structured approach. Additionally, these technologies are widely used in the industry, ensuring compatibility and best practices.</p>"},{"location":"web/database/#database-design","title":"Database Design","text":""},{"location":"web/database/#design-choices-candidate-keys","title":"Design Choices &amp; Candidate Keys","text":"<p>The following tables describe each entity in the database, the chosen candidate keys, and the reasoning behind the design decisions.</p>"},{"location":"web/database/#device-table","title":"Device Table","text":"Column Data Type Constraints Candidate Key Use Case &amp; Design Choice <code>id</code> <code>INT AUTO_INCREMENT</code> PRIMARY KEY Yes Ensures each device has a unique identifier. <code>key</code> <code>VARCHAR(50)</code> UNIQUE NOT NULL Yes Allows human-friendly lookup (e.g., <code>sensor_hub_1</code>). <code>name</code> <code>VARCHAR(100)</code> UNIQUE NOT NULL No Descriptive name for UI, but not used as a key."},{"location":"web/database/#reading-table","title":"Reading Table","text":"Column Data Type Constraints Candidate Key Use Case &amp; Design Choice <code>id</code> <code>INT AUTO_INCREMENT</code> PRIMARY KEY Yes Ensures each reading has a unique identifier. <code>device_id</code> <code>INT</code> FOREIGN KEY No Links readings to a specific device. <code>timestamp</code> <code>TIMESTAMP</code> DEFAULT <code>CURRENT_TIMESTAMP</code> No Automatically records when a reading is taken."},{"location":"web/database/#sensor-table","title":"Sensor Table","text":"Column Data Type Constraints Candidate Key Use Case &amp; Design Choice <code>id</code> <code>INT AUTO_INCREMENT</code> PRIMARY KEY Yes Ensures uniqueness for each sensor type. <code>key</code> <code>VARCHAR(50)</code> UNIQUE NOT NULL Yes Used for lookups, prevents duplicate sensor types. <code>name</code> <code>VARCHAR(100)</code> NOT NULL No Descriptive name, but not unique enough for indexing. <code>unit</code> <code>VARCHAR(10)</code> NOT NULL No Stores unit of measurement (e.g., <code>\u00b0C</code>, <code>hPa</code>)."},{"location":"web/database/#sensordata-table","title":"SensorData Table","text":"Column Data Type Constraints Candidate Key Use Case &amp; Design Choice <code>id</code> <code>INT AUTO_INCREMENT</code> PRIMARY KEY Yes Ensures each sensor reading is uniquely stored. <code>reading_id</code> <code>INT</code> FOREIGN KEY No Links to the <code>Reading</code> table. <code>sensor_id</code> <code>INT</code> FOREIGN KEY No Links to the <code>Sensor</code> table. <code>value</code> <code>DECIMAL(7,2)</code> NOT NULL No Stores the sensor measurement with precision."},{"location":"web/database/#setting-table","title":"Setting Table","text":"Column Data Type Constraints Candidate Key Use Case &amp; Design Choice <code>id</code> <code>INT AUTO_INCREMENT</code> PRIMARY KEY Yes Uniquely identifies each setting. <code>key</code> <code>VARCHAR(50)</code> UNIQUE NOT NULL Yes Used for lookup in the system. <code>name</code> <code>VARCHAR(100)</code> NOT NULL No Descriptive setting name. <code>value</code> <code>DECIMAL(10,4)</code> NULL No Stores user-defined value (overrides default). <code>default_value</code> <code>DECIMAL(10,4)</code> NOT NULL No Stores the system's fallback setting."},{"location":"web/database/#erd-schema","title":"ERD Schema","text":"<p>The diagram below represents the Entity-Relationship Diagram (ERD) for the database, illustrating how the tables relate to each other.</p> <p></p>"},{"location":"web/database/#database-schema","title":"Database Schema","text":"<p>The following SQL script defines the Schema for the database.</p> <pre><code>-- Create the Database\nCREATE DATABASE IF NOT EXISTS `atmos`;\nUSE `atmos`;\n\n-- Create Device Table\nCREATE TABLE IF NOT EXISTS `Device` (\n`id` INT AUTO_INCREMENT PRIMARY KEY,\n`key` VARCHAR(50) UNIQUE NOT NULL,\n`name` VARCHAR(100) UNIQUE NOT NULL\n);\n\n-- Create Reading Table\nCREATE TABLE IF NOT EXISTS `Reading` (\n`id` INT AUTO_INCREMENT PRIMARY KEY,\n`device_id` INT NOT NULL,\n`timestamp` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\nFOREIGN KEY (`device_id`) REFERENCES `Device`(`id`) ON DELETE CASCADE\n);\n\n-- Create Sensor Table\nCREATE TABLE IF NOT EXISTS `Sensor` (\n`id` INT AUTO_INCREMENT PRIMARY KEY,\n`key` VARCHAR(50) UNIQUE NOT NULL,\n`name` VARCHAR(100) NOT NULL,\n`unit` VARCHAR(10) NOT NULL\n);\n\n-- Create Sensor Data Table\nCREATE TABLE IF NOT EXISTS `SensorData` (\n`id` INT AUTO_INCREMENT PRIMARY KEY,\n`reading_id` INT NOT NULL,\n`sensor_id` INT NOT NULL,\n`value` DECIMAL(7,2) NOT NULL,\nFOREIGN KEY (`reading_id`) REFERENCES `Reading`(`id`) ON DELETE CASCADE,\nFOREIGN KEY (`sensor_id`) REFERENCES `Sensor`(`id`) ON DELETE CASCADE\n);\n\n-- Create Setting Table\nCREATE TABLE IF NOT EXISTS `Setting` (\n`id` INT AUTO_INCREMENT PRIMARY KEY,\n`key` VARCHAR(50) UNIQUE NOT NULL,\n`name` VARCHAR(100) NOT NULL,\n`value` DECIMAL(10,4) NULL,\n`default_value` DECIMAL(10,4) NOT NULL\n);\n\n-- Indexes for performance\nCREATE INDEX `idx_sensor_key` ON `Sensor` (`key`);\nCREATE INDEX `idx_setting_key` ON `Setting` (`key`);\nCREATE INDEX `idx_device_timestamp` ON `Reading` (`device_id`, `timestamp`);\nCREATE INDEX `idx_sensor_data_reading` ON `SensorData` (`reading_id`);\nCREATE INDEX `idx_sensor_data_sensor` ON `SensorData` (`sensor_id`);\n</code></pre>"},{"location":"web/database/#data-inserts","title":"Data Inserts","text":"<p>This section provides predefined data inserts for sensors and system settings, ensuring the project is ready.</p>"},{"location":"web/database/#add-arduino-sensors-to-the-sensor-table","title":"Add Arduino Sensors to the Sensor Table","text":"<pre><code>INSERT INTO `Sensor` (`key`, `name`, `unit`) VALUES\n('dht11_temperature', 'DHT11 Temperature Sensor', '\u00b0C'),\n('dht11_humidity', 'DHT11 Humidity Sensor', '%'),\n('bh1750_lux', 'BH1750 Light Sensor', 'lux'),\n('analog_water', 'Analog Water Sensor', 'level'),\n('bmp180_temperature', 'BMP180 Temperature Sensor', '\u00b0C'),\n('bmp180_pressure', 'BMP180 Pressure Sensor', 'hPa');\n</code></pre>"},{"location":"web/database/#add-arduino-sensors-to-the-sensor-table_1","title":"Add Arduino Sensors to the Sensor Table","text":"<pre><code>INSERT INTO `Setting` (`key`, `name`, `value`, `default_value`) VALUES\n('pressure_min', 'Minimum Atmospheric Pressure', NULL, 900),\n('pressure_max', 'Maximum Atmospheric Pressure', NULL, 1080),\n('wind_speed_min', 'Minimum Wind Speed', NULL, 0),\n('wind_speed_max', 'Maximum Wind Speed', NULL, 100),\n('temperature_min', 'Minimum Temperature', NULL, -10),\n('temperature_max', 'Maximum Temperature', NULL, 50),\n('lux_min', 'Minimum Light Intensity (Lux)', NULL, 0),\n('lux_max', 'Maximum Light Intensity (Lux)', NULL, 1000),\n\n('blob_intensity_min', 'Minimum Blob Intensity', NULL, 0.05),\n('blob_intensity_max', 'Maximum Blob Intensity', NULL, 1),\n('blob_speed_min', 'Minimum Blob Movement Speed', NULL, 0.01),\n('blob_speed_max', 'Maximum Blob Movement Speed', NULL, 0.5),\n\n('background_noise_scale_min', 'Minimum Background Noise Scale', NULL, 5),\n('background_noise_scale_max', 'Maximum Background Noise Scale', NULL, 10),\n('background_height_min', 'Minimum Background Height', NULL, 0.5),\n('background_height_max', 'Maximum Background Height', NULL, 2.5),\n('background_speed_min', 'Minimum Background Movement Speed', NULL, 1),\n('background_speed_max', 'Maximum Background Movement Speed', NULL, 60),\n('background_brightness_min', 'Minimum Background Brightness', NULL, 0.1),\n('background_brightness_max', 'Maximum Background Brightness', NULL, 1),\n\n('color_temperature_threshold', 'Temperature Threshold for Color Changes', NULL, 10),\n('color_humidity_brightness_factor', 'Impact of Humidity on Color Brightness', NULL, 1);\n</code></pre>"},{"location":"web/database/#views","title":"Views","text":"<p>Views allow for efficient querying and pre-processing of sensor data, providing structured results without complex SQL joins in API queries.</p>"},{"location":"web/database/#latest-sensor-readings-per-device","title":"Latest Sensor Readings Per Device","text":"<p>Fetches the most recent sensor readings per device, ensuring that each device only appears once with its latest values.</p> <pre><code>SELECT * FROM LatestDeviceReadings;\n</code></pre> <pre><code>CREATE VIEW LatestDeviceReadings AS\nSELECT\nd.id AS device_id,\nd.name AS device_name,\ns.name AS sensor_name,\ns.unit AS sensor_unit,\nsd.value,\nr.timestamp\nFROM SensorData sd\nJOIN Reading r ON sd.reading_id = r.id\nJOIN Device d ON r.device_id = d.id\nJOIN Sensor s ON sd.sensor_id = s.id\nWHERE r.timestamp = (\nSELECT MAX(r2.timestamp) FROM Reading r2 WHERE r2.device_id = d.id\n)\nORDER BY r.timestamp DESC;\n</code></pre>"},{"location":"web/database/#step-by-step-guide","title":"Step-by-Step Guide","text":"<p>This guide shows how to create the database, add a user, and import the SQL script inside the Docker-powered phpMyAdmin environment.</p> <p><code>YOUR_DB_NAME</code> is <code>atmos</code> by default, but you can use a different name\u2014just make sure to update the SQL script to reference the correct database.</p> <p>\ud83d\udccc The full SQL script is available on GitLab.</p>"},{"location":"web/database/#1-start-phpmyadmin","title":"1. Start phpMyAdmin","text":"<ol> <li>Run Docker (if not already running).</li> <li>Open localhost/phpmyadmin.</li> <li>Log in with root MySQL credentials. (Can be found in the <code>.env</code> in the root of the repository)</li> </ol>"},{"location":"web/database/#2-create-the-database","title":"2. Create the Database","text":"<ol> <li>Go to the Databases tab.</li> <li>Enter <code>YOUR_DB_NAME</code> as the database name.</li> <li>Select utf8mb4_general_ci collation.</li> <li>Click Create.</li> </ol>"},{"location":"web/database/#3-create-a-new-user","title":"3. Create a New User","text":"<ol> <li>Navigate to User accounts.</li> <li>Click Add user account.</li> <li>Set:</li> <li>Username: Set a username</li> <li>Host: <code>localhost</code> or <code>%</code> depending on the network.</li> <li>Password: Set a password</li> <li>Click Go to create the user.</li> <li>Under Database, select Grant privileges on database \u2192 Choose <code>atmos</code>.</li> <li>Under Data grant the following privileges:</li> <li><code>SELECT</code></li> <li><code>INSERT</code></li> <li><code>UPDATE</code></li> <li><code>DELETE</code></li> <li>Click Go to update the user.</li> </ol>"},{"location":"web/database/#4-import-the-sql-script","title":"4. Import the SQL Script","text":"<ol> <li>Go to Import.</li> <li>Click Choose File \u2192 Select the SQL script.</li> <li>Click Go to execute it.</li> </ol>"},{"location":"web/database/#5-verify-the-setup","title":"5. Verify the Setup","text":"<ol> <li>Open the atmos database in phpMyAdmin.</li> <li>Check if all tables exist.</li> <li>Run <code>SELECT * FROM Setting;</code> to test the data.</li> </ol>"},{"location":"web/database/#file","title":"File","text":"<p>\ud83d\udccc The full SQL script is available on GitLab.</p>"},{"location":"web/technical_documentation/","title":"Technical Documentation","text":""},{"location":"web/technical_documentation/#technical-documentation","title":"Technical Documentation","text":""},{"location":"web/technical_documentation/#technologies","title":"Technologies","text":""},{"location":"web/technical_documentation/#frontend","title":"Frontend","text":"<ul> <li>HTML \u2013 Structuring the web page.</li> <li>Vite \u2013 Fast development server and build tool for frontend assets.</li> <li>Three.js \u2013 Rendering 3D content interactively.</li> <li>SCSS \u2013 Styling with modular and reusable CSS components.</li> <li>TWIG \u2013 PHP Templating engine for modular and dynamic HTML.</li> <li>Websockets - Allowing Real-time communication with Embedded devices.</li> </ul>"},{"location":"web/technical_documentation/#backend","title":"Backend","text":"<ul> <li>PHP \u2013 Server-side scripting for handling API requests.</li> <li>MySQLi \u2013 PHP extension for interacting with the database.</li> </ul>"},{"location":"web/technical_documentation/#database","title":"Database","text":"<ul> <li>MariaDB as the relational database.</li> <li>phpMyAdmin for database management.</li> <li>Draw.io for ERD diagram concept.</li> <li>MySQL Workbench for designing the database schema.</li> </ul>"},{"location":"web/technical_documentation/#considerations","title":"Considerations","text":"<p>While Express.js was considered for the backend due to its popularity and ease of maintenance, the decision was made to follow the specifications from the project rubric. However, using Express.js could be a potential optimization for future improvements.</p>"},{"location":"web/technical_documentation/#problems-encountered-solutions","title":"Problems Encountered &amp; Solutions","text":""},{"location":"web/technical_documentation/#cross-origin-requests-cors","title":"Cross-Origin Requests (CORS)","text":"<p>Problem: Frontend could not fetch data from the backend due to CORS restrictions. Solution: Configured appropriate CORS headers to allow secure communication.</p>"},{"location":"web/technical_documentation/#considerations-contemporary-web-development-practices","title":"Considerations &amp; Contemporary Web Development Practices","text":""},{"location":"web/technical_documentation/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Minimized API response times by using ATOMIC POST Requests. (/reading-with-sensordata)</li> <li>Used Vite to reduce frontend build times.</li> </ul>"},{"location":"web/technical_documentation/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Used environment variables to store sensitive credentials.</li> <li>Restricted CORS access to prevent unauthorized requests.</li> </ul>"},{"location":"web/technical_documentation/#scalability","title":"Scalability","text":"<ul> <li>Modular MVC structure allows easy extension.</li> <li>Singleton pattern ensures efficient database handling.</li> </ul>"},{"location":"web/technical_documentation/#custom-nginx-setup","title":"Custom NGINX Setup","text":"<p>The NGINX configuration clearly separates production and development environments:</p>"},{"location":"web/technical_documentation/#production-localhost","title":"Production (<code>localhost</code>)","text":"<ul> <li>Serves compiled static site that was generated from Twig.</li> <li>Serves compiled static CSS that was generated from Vite.</li> <li>Serves compiled static JS that was generated from Vite.</li> <li>Handles <code>/api/</code> routes with PHP and proxies external requests.</li> <li>Integrates <code>ngx_http_push_stream_module</code> for WebSocket support.</li> </ul>"},{"location":"web/technical_documentation/#development-devlocalhost","title":"Development (<code>dev.localhost</code>)","text":"<ul> <li>Provides development URL for testing.</li> <li>Hot reload thanks to Vite dev server (<code>iot-vite:5173</code>).</li> <li>Twig templates are rendered dynamically using <code>index.php</code>.</li> <li>Development environment for API and database testing.</li> </ul>"},{"location":"web/technical_documentation/#api-reference","title":"API Reference","text":"<ul> <li>API Documentation: API Reference</li> </ul>"}]}